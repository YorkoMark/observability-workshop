<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops â€“ Instrumentation Examples</title><link>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/</link><description>Recent content in Instrumentation Examples on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Otelw: Istio Setup</title><link>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/istio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/istio/</guid><description>
&lt;p>CAVEAT: THIS LAB IS DESIGNED FOR THE UBUNTU SANDBOX CREATED AT THE START OF THE APM WORKSHOP AND IS TESTED IN THAT ENVIRONMENT ONLY
THIS LAB IS A WORK IN PROCESS AND YOUR RESULTS MAY VARY&lt;/p>
&lt;p>This exercise will install an Istio service mesh on a Kubernetes cluster that directs external requests to a Python Flask server.
Both the service mesh and the Flask server will emit spans.
The result will show tracing of the external request to the node and through the mesh to the Flask server.&lt;/p>
&lt;h2 id="1-install-opentelemetry-collector">1: Install OpenTelemetry Collector&lt;/h2>
&lt;p>If you have an existing collector running remove it.&lt;/p>
&lt;p>Follow Data Setup wizard but add:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">--set autodetect.istio=true`
&lt;/code>&lt;/pre>&lt;/div>&lt;p>i.e.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">helm install &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set &lt;span style="color:#000">splunkAccessToken&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;YOURTOKENHERE&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set &lt;span style="color:#000">clusterName&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;YOURCLUSTERNAMEHERE&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set &lt;span style="color:#000">splunkRealm&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;YOURREALMHERE&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set autodetect.istio&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set &lt;span style="color:#000">provider&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set &lt;span style="color:#000">distro&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--set otelCollector.enabled&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;false&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--generate-name &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>splunk-otel-collector-chart/splunk-otel-collector
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-set-up-istio">2: Set Up Istio&lt;/h2>
&lt;p>Download Istio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~
curl -L https://istio.io/downloadIstio &lt;span style="color:#000;font-weight:bold">|&lt;/span> sh -
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Follow instructions from the installer script that are now in your terminal to add Istio&amp;rsquo;s bin path to your env then:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">istioctl install
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-deploy-istio-configurations-and-example-flask-microservice">3: Deploy Istio configurations and example Flask microservice&lt;/h2>
&lt;p>Enable automatic Istio proxy injection. &lt;a href="https://istio.io/latest/docs/setup/additional-setup/sidecar-injection/#automatic-sidecar-injection" target="_blank">More info here&lt;/a>
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl label namespace default istio-injection&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>enabled
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Change to the APM Workshop Istio directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/k8s/istio
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Install the Splunk tracing profile for Istio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">istioctl install -f tracing.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set and validate ingress ports for Nodeport example and configure ingress host for local k3s workshop example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> setup-envs.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see a result that looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">TCP_INGRESS_PORT=
INGRESS_PORT=30785
INGRESS_HOST=172.31.19.248
SECURE_INGRESS_PORT=32071
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deploy Flask service configured for Istio:&lt;/p>
&lt;p>!!! important
If you are doing this workshop as part of a group, before the next step, add your initials do the APM environment:
edit the &lt;code>flask-deployment-istio.yaml&lt;/code> below and add your initials to the environment i.e. change all instances:&lt;br>
&lt;code>deployment.environment=apm-workshop&lt;/code>&lt;br>
to &lt;br>
&lt;code>deployment.environment=sjl-apm-workshop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl apply -f flask-deployment-istio.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Single test Flask service:&lt;br>
&lt;code>source test-flask.sh&lt;/code>&lt;/p>
&lt;p>Results should show a direct request to the Flask server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">You getted: b&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span> Request headers: Host: localhost:30001
User-Agent: curl/7.68.0
Accept: */*
Server: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Single test Istio:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> test-istio.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When hitting the service mesh from outside the cluster, you&amp;rsquo;ll receive the mesh diagnostic data plus the B3 Trace/Span ID:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">You getted: b&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span> Request headers: Host: 172.31.19.248:31177
User-Agent: curl/7.68.0
Accept: */*
Server: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
X-Forwarded-For: 10.42.0.1
X-Forwarded-Proto: http
X-Envoy-Internal: &lt;span style="color:#204a87">true&lt;/span>
X-Request-Id: 447af547-7b8f-96db-a0b5-08efce526a8d
X-Envoy-Decorator-Operation: server-flask-otel-k8s.default.svc.cluster.local:5000/echo
X-Envoy-Peer-Metadata: ChQKDkFQUF9DT05UQUlORVJTEgIaAAoaCgpDTFVTVEVSX0lEEgwaCkt...
3NnYXRld2F5
X-Envoy-Peer-Metadata-Id: router~10.42.0.11~istio-ingressgateway-7d97f78f5-dg5zc.istio-system~istio-system.svc.cluster.local
X-Envoy-Attempt-Count: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
X-B3-Traceid: 5035304e854aa834e990df295b1d98e9
X-B3-Spanid: e990df295b1d98e9
X-B3-Sampled: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To generate many requests so that the example appears in the APM service map, use the load generator:&lt;/p>
&lt;p>Load gen Istio for two minutes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> loadgen.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see a service map with the Istio mesh and the Flask server:&lt;/p>
&lt;p>&lt;img src="../../../../images/istio1.png" alt="Istio">&lt;/p>
&lt;p>Traces will show the request hitting the service mesh and the mesh hitting the service itself:&lt;/p>
&lt;p>&lt;a href="../../../../images/istio2.png">Istio2&lt;/a>
&lt;/p>
&lt;p>Stop loadgen:&lt;/p>
&lt;p>++ctrl+c++&lt;/p>
&lt;p>Cleanup:&lt;br>
remove k8s examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> delete-all.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remove Istio:&lt;br>
From the Istio bin directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">istioctl x uninstall --purge
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Otelw: .Net Setup</title><link>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/dotnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/dotnet/</guid><description>
&lt;p>.NET CORE example uses the .NET http client to get non-responding URL so makes valid traces with 403 status code&lt;/p>
&lt;p>Containerized with these &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows" target="_blank">instructions from Microsoft&lt;/a>
&lt;/p>
&lt;p>&lt;strong>.NET Core 5&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>cd ~/otelworkshop/k8s/dotnet
&lt;/code>&lt;/pre>&lt;p>Deploy:&lt;/p>
&lt;pre tabindex="0">&lt;code>source deploy-client.sh
&lt;/code>&lt;/pre>&lt;p>Delete deployment:&lt;/p>
&lt;pre tabindex="0">&lt;code>source delete-all.sh
&lt;/code>&lt;/pre>&lt;p>&lt;strong>.NET Core 2.1&lt;/strong>
.NET Core 2.1 &lt;a href="dotnet21.md">located here&lt;/a>
&lt;/p></description></item><item><title>Otelw: .Net Core 2.1</title><link>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/dotnet21/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.20/otelw/labs/apm_for_k8s/examples/dotnet21/</guid><description>
&lt;p>.NET CORE example uses the .NET http client to get non-responding URL so makes valid traces with 403 status code&lt;/p>
&lt;p>Containerized with these &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/docker/build-container?tabs=windows" target="_blank">instructions from Microsoft&lt;/a>
&lt;/p>
&lt;p>&lt;strong>For .NET Core 2.1&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>cd ~/otelworkshop/k8s/dotnet21
&lt;/code>&lt;/pre>&lt;p>Deploy:&lt;/p>
&lt;pre tabindex="0">&lt;code>source deploy-client.sh
&lt;/code>&lt;/pre>&lt;p>Delete deployment:&lt;/p>
&lt;pre tabindex="0">&lt;code>source delete-all.sh
&lt;/code>&lt;/pre></description></item></channel></rss>
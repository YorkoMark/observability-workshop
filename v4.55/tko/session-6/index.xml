<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>6. O11y - Distributed Tracing for modern applications on Splunk Observability Cloud Workshops</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/index.html</link><description>Recent content in 6. O11y - Distributed Tracing for modern applications on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://splunk.github.io/observability-workshop/v4.55/tko/session-6/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/setup/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/setup/index.html</guid><description>1. Set Environment Variables Environment Variables:
export USERNAME=&amp;lt;Your-UserName&amp;gt; export SPLUNK_ACCESS_TOKEN=&amp;lt;Your-Token&amp;gt; export SPLUNK_REALM=&amp;lt;Your-Realm&amp;gt; 2. Implement Auto-Instrumentation cd shop vi Dockerfile Add the Otel Java Agent to Java ENTRYPOINT:
Change this:
ENTRYPOINT java -Dotel.resource.attributes=service.name=shop,deployment.environment=${USERNAME}_Apm_Instrumentation_Shop -jar app.jar To this:
ENTRYPOINT java -javaagent:splunk-otel-javaagent-all.jar -Dotel.resource.attributes=service.name=shop,deployment.environment=${USERNAME}_Apm_Instrumentation_Shop -jar app.jar See examples at:
vi ../Dockerfiles_Instrumented Repeat for: instruments / products / stock
3. Build and Deploy Application cd &amp;#34;javashop-otel directory&amp;#34; ./BuildAndDeploy.sh</description></item><item><title>Validate Traces are being collected</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/validate_traces/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/validate_traces/index.html</guid><description>1. Users and Workflows As we go through this workshop we will be switching roles from SRE to Developer. First we will start with first responders or SREs who will identify an issue in Splunk Observability UI.
Next, we will jump to a Developer Role to see how a Developer will solve a problem using trace data identified by our SRE. Of course, we are not requiring 2 people for this workshop as each participant will play both roles.</description></item><item><title>Developer Role</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/developer_role/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/developer_role/index.html</guid><description>1. Now let&amp;rsquo;s play the role of the developer As a developer we must debug the function products:ProductResource.getAllProducts to find the problem.
Now find the needle in Haystack !
vi products/src/main/java/com/shabushabu/javashop/products/resources/ProductResource.java Find getAllProducts /getAllProducts
scroll way&amp;hellip; down!
public class ProductResource { private ProductService productService; @Inject public ProductResource(ProductService productService) { this.productService = productService; } @GET public Response getAllProducts(@DefaultValue(&amp;#34;California&amp;#34;) @QueryParam(&amp;#34;location&amp;#34;) String location) { // STEP X: All we know right now is somewhere in this function, latency was introduced.</description></item><item><title>Custom Attribution</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/custom_attribution/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/custom_attribution/index.html</guid><description>To take a deeper look at this issue, we will implement Custom Attributes via Opentelemetry Manual Instrumentation
To speed up manual instrumentation in Java you can leverage OpenTelemetry Annotations, which automatically create a span around a method without modifying the actual code inside the method.
This can be very valueable if you are working with an SRE that may have limited accesss to source code changes.
To add even more information to help our developers find the root cause faster, OpenTelemetry Annotations can be used to generate span tags with parameter values for the method in question.</description></item><item><title>Fix the issue</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/fix_issue/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/fix_issue/index.html</guid><description>1. Let&amp;rsquo;s play Developer once again and fix our issue We already know exactly what file to look in and what method to look at as it is called out in the trace.
Edit the file
vi shop/src/main/java/com/shabushabu/javashop/shop/model/Instrument.java Search for the method buildForLocale /buildForLocale
Look at Code, notice the Annotation @WithSpan()? @WithSpan() is an OpenTelemetry Annotation for Java that automatically generates a span around a the function that follows.
@SpanAttribute() is another OpenTelemetry Annotation that automatically adds a tag to a span with the corresponding parameter it annotates and its value.</description></item><item><title>Root Cause Analysis</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/root_cause/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/root_cause/index.html</guid><description>1. Latency Root Cause Open Service Map in Splunk Observability UI
We can see we still have our original Latency issue, however our exception for Invalid Locale should be gone.
Let&amp;rsquo;s check to see our InvalidLocale Exception is gone. Click Shop Service, click Traces on the right. We did remove the exception however it seems removing the Exception did not fix the latency&amp;hellip;
Lets see if the newly added annotations provide us more relevant information for the next responder once we find the cause.</description></item><item><title>Build and Deploy again</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/build_again/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/build_again/index.html</guid><description>1. Build and Deploy Application again ./BuildAndDeploy.sh Now that we have rebuilt and deployed our application, traffic is being sent once again.
We are waiting a few minutes . . .
Congratulations If you do not see Red in your service map, you have successfully completed our Inventory application review for Shri Lanka and Colorado locations!!
Now let&amp;rsquo;s ensure Chicago was on-boarded correctly. However, since we have been having so many issues related to &amp;ldquo;location&amp;rdquo; and we have added that custom attribute via Opentelemetry Manual Instrumentation, lets go to the Splunk Observability UI and create an APM metric set around that tag.</description></item><item><title>The Final Fix!</title><link>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/final_fix/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.55/tko/session-6/docs/final_fix/index.html</guid><description>1. Let&amp;rsquo;s play developer again Edit the file instruments: InstrumentRepository.findInstruments
vi instruments/src/main/java/com/shabushabu/javashop/instruments/repositories/FindInstrumentRepositoryImpl.java @SuppressWarnings(&amp;#34;unchecked&amp;#34;) @Override public Object findInstruments() { LOGGER.info(&amp;#34;findInstruments Called (All)&amp;#34;); Object obj = entityManager.createNativeQuery( &amp;#34;SELECT * FROM instruments_for_sale, instruments_for_sale_chicago&amp;#34;).getResultList(); return obj; } We can see the developer accidently added the Instruments database with the Chicago Instruments database! Let&amp;rsquo;s change the query and fix this, remove instruments_for_sale from our query.
Change this:
public Object findInstruments() { LOGGER.info(&amp;#34;findInstruments Called (All)&amp;#34;); Object obj = entityManager.</description></item></channel></rss>
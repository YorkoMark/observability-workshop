<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops – Creating checks</title><link>https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/</link><description>Recent content in Creating checks on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Synthetics: Real Browser Check</title><link>https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/real-browser-checks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/real-browser-checks/</guid><description>
&lt;p>This Lab walks your through using the &lt;a href="https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en" target="_blank">Chrome Selenium IDE&lt;/a>
extension to create a synthetic transaction against a Splunk demo instance and creating a Splunk Synthetic Monitoring Real Browser Check (RBC). In addition you also get to learn other Splunk Synthetic Monitoring checks like REST API checks and Uptime Checks.&lt;/p>
&lt;h2 id="1-prerequisites">1. Prerequisites&lt;/h2>
&lt;p>Ensure you can login with your username and password at &lt;a href="https://monitoring.rigor.com" target="_blank">https://monitoring.rigor.com&lt;/a>
and &lt;a href="https://optimization.rigor.com" target="_blank">https://optimization.rigor.com&lt;/a>
. Also, make sure you are assigned to your own account for example: &lt;strong>O11y Workshop&lt;/strong>.&lt;/p>
&lt;p>Edit your Splunk Synthetic Monitoring account personal information and adjust your timezone and email notifications. Splunk Synthetic Monitoring will default to start sending you notifications, you can turn them off at the monitor configuration level.&lt;/p>
&lt;p>&lt;img src="../../images/image5.png" alt="Edit Personal Information">&lt;/p>
&lt;p>Add the &lt;a href="https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd?hl=en-US" target="_blank">Chrome Selenium IDE&lt;/a>
extension to your &lt;strong>Chrome&lt;/strong> Browser. Once installed click on the extension and you will see the following screen:&lt;/p>
&lt;p>&lt;img src="../../images/image17.png" alt="Selenium IDE">&lt;/p>
&lt;h2 id="2-using-selenium-ide">2. Using Selenium IDE&lt;/h2>
&lt;p>You can now go ahead and record a web transaction using Selenium IDE to check on &lt;a href="http://splunk.o11ystore.com" target="_blank">http://splunk.o11ystore.com&lt;/a>
.&lt;/p>
&lt;p>Click on &lt;strong>Record a new test in a new project&lt;/strong>, name the project &lt;strong>[YOUR_INITIALS] - O11y Store&lt;/strong> e.g. RWC - O11y Store.&lt;/p>
&lt;p>!!! question &amp;ldquo;What is Selenium IDE?&amp;rdquo;
- Selenium IDE is an open source record and playback test automation for the web.
- Selenium is a portable framework for testing web applications.
- Selenium provides a playback tool for authoring functional tests without the need to learn a test scripting language (Selenium IDE).
- It also provides a test domain-specific language (Selenese) to write tests in a number of popular programming languages, including C#, Groovy, Java, Perl, PHP, Python, Ruby and Scala.
- The tests can then run against most modern web browsers.
- Selenium runs on Windows, Linux, and macOS.
- It is open-source software released under the Apache License 2.0.&lt;/p>
&lt;p>&lt;img src="../../images/image29.png" alt="placeholder">&lt;/p>
&lt;p>Enter &lt;a href="http://splunk.o11ystore.com" target="_blank">http://splunk.o11ystore.com&lt;/a>
as your base URL.&lt;/p>
&lt;p>&lt;img src="../../images/image11.png" alt="placeholder">&lt;/p>
&lt;p>Click Start Recording{: .label-button .sfx-ui-button-grey}, a new window should open up with &lt;a href="http://splunk.o11ystore.com" target="_blank">splunk.o11ystore.com&lt;/a>
. Click &lt;strong>Vintage Camera Lens&lt;/strong>, click &lt;strong>Add To Cart&lt;/strong> and then click &lt;strong>Place Order&lt;/strong>.&lt;/p>
&lt;p>Close the window and then stop the recording by navigating back to Selenium IDE. Finally name the test: &lt;strong>[YOUR_INITIALS] - Checkout Flow (Desktop)&lt;/strong> e.g. RWC - Checkout Flow (Desktop).&lt;/p>
&lt;p>&lt;img src="../../images/image10.png" alt="placeholder">&lt;/p>
&lt;p>Your Selenium IDE Project will look something like this:&lt;/p>
&lt;p>&lt;img src="../../images/image19.png" alt="placeholder">&lt;/p>
&lt;p>Test your recording by pressing on the play button, make sure your recording successfully completes the transaction:&lt;/p>
&lt;p>&lt;img src="../../images/image26.png" alt="Run">&lt;/p>
&lt;p>Save your Selenium IDE Project to your Downloads folder as &lt;code>Workshop.side&lt;/code>&lt;/p>
&lt;p>&lt;img src="../../images/image30.png" alt="Save">&lt;/p>
&lt;p>&lt;img src="../../images/save-side-project.png" alt="Save SIDE Project">&lt;/p>
&lt;h2 id="3-create-real-browser-check">3. Create Real Browser Check&lt;/h2>
&lt;p>Login to Splunk Synthetic Monitoring using &lt;a href="https://monitoring.rigor.com" target="_blank">https://monitoring.rigor.com&lt;/a>
. Click on &lt;strong>REAL BROWSER&lt;/strong> and click &lt;strong>+New&lt;/strong>{: .label-button .sfx-ui-button-blue}.&lt;/p>
&lt;p>&lt;img src="../../images/image3.png" alt="placeholder">&lt;/p>
&lt;p>Click on &amp;ldquo;&lt;strong>From File&lt;/strong>&amp;rdquo; and select your recording then click on Import&lt;/p>
&lt;p>&lt;img src="../../images/image1.png" alt="placeholder">&lt;/p>
&lt;p>Set the &lt;strong>Frequency&lt;/strong> to &lt;strong>5 Minutes&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/image15.png" alt="placeholder">&lt;/p>
&lt;p>Click on Steps and make the following adjustments to your recording provide a friendly name to Steps 1 (Click Camera), 2 (Add to Cart) &amp;amp; 3 (Place Order).&lt;/p>
&lt;p>&lt;img src="../../images/image6.png" alt="placeholder">&lt;/p>
&lt;p>Next, click &lt;strong>+ Add Step&lt;/strong>, with this new step we will add some validation to the monitor. This is to ensure the checkout completed successfully.&lt;/p>
&lt;p>Enter &lt;strong>Confirm Order&lt;/strong> for the &lt;strong>Name&lt;/strong> and change the &lt;strong>Action&lt;/strong> to &lt;strong>Wait for text present&lt;/strong> and finally enter &lt;strong>Your order is complete!&lt;/strong> for the &lt;strong>Value&lt;/strong>. You will now have a &lt;strong>Start Url&lt;/strong> and 4 steps in your monitor configuration.&lt;/p>
&lt;p>&lt;img src="../../images/image2.png" alt="placeholder">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p class="alert-heading">Tip&lt;/p>
&lt;p class="alert-body">
&lt;p>As you are creating the steps think about how to go about using the &lt;a href="https://help.rigor.com/hc/en-us/articles/360049442854-How-Do-I-Use-Business-Transactions" target="_blank">Business Transaction&lt;/a>
&lt;p>feature in Splunk Synthetic Monitoring which is very powerful. &lt;em>“Business Transactions are a combined group of contiguous steps in a Real Browser script that are to be measured as a whole. These transactions logically group similar parts of a flow together, so that users can view the performance of multiple steps and page(s) grouped under one Business Transaction.&amp;quot;&lt;/em>&lt;/p>&lt;/p>
&lt;/p>
&lt;/div>
&lt;p>Click on &lt;strong>Advanced&lt;/strong> and make sure the &lt;strong>Viewport Size&lt;/strong> is set to &lt;strong>Default desktop: 1366 x 768&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/viewport-size.png" alt="Viewport Size">&lt;/p>
&lt;p>Click on &amp;ldquo;&lt;strong>Test&lt;/strong>&amp;rdquo; to test your monitor. Once the test has successfully completed make sure to click on &amp;ldquo;&lt;strong>AFTER&lt;/strong>&amp;rdquo; in Step 4 to validate the monitor was able to get to the order complete screenshot.&lt;/p>
&lt;p>&lt;img src="../../images/image22.png" alt="placeholder">&lt;/p>
&lt;p>Click on &lt;strong>Create&lt;/strong>{: .label-button .sfx-ui-button-blue} to save your Real Browser Monitor. After 5-10 minutes validate your monitor is working and producing successful checks e.g.&lt;/p>
&lt;p>&lt;img src="../../images/image27.png" alt="placeholder">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p class="alert-heading">Tip&lt;/p>
&lt;p class="alert-body">
&lt;p>You can force to run your monitor now using &lt;strong>Run Now&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/image8.png" alt="placeholder">&lt;/p>
&lt;/p>
&lt;/div>
&lt;p>Change your view to &lt;strong>Segment by location&lt;/strong> and observe the difference. You can turn off/on locations by clicking on them.&lt;/p>
&lt;p>!!! question &amp;ldquo;Question?&amp;rdquo;
Which Location has the poorest &lt;strong>Response Time&lt;/strong>?&lt;/p>
&lt;p>&lt;img src="../../images/image9.png" alt="placeholder">&lt;/p>
&lt;p>Click on one of the successful circles to drilldown into that Run:&lt;/p>
&lt;p>&lt;img src="../../images/image33.png" alt="placeholder">&lt;/p>
&lt;p>Take a moment to explore the metrics with the &lt;strong>CONFIGURE METRICS/HIDE METRICS&lt;/strong> dropdown.&lt;/p>
&lt;p>&lt;img src="../../images/image14.png" alt="placeholder">&lt;/p>
&lt;p>Click &lt;strong>Page 2&lt;/strong> in the dropdown, and scroll down to view the &lt;strong>Filmstrip&lt;/strong> and the &lt;strong>Waterfall Chart.&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/image16.png" alt="placeholder">&lt;/p>
&lt;p>&lt;img src="../../images/filmstrip.png" alt="Filmstrip">&lt;/p>
&lt;p>&lt;img src="../../images/waterfall.png" alt="Waterfall">&lt;/p>
&lt;p>Click on &lt;strong>Click Here to Analyze with Optimization&lt;/strong> which will prompt you to login to your Splunk Synthetic Monitoring Optimization Account. If you &lt;strong>don&amp;rsquo;t have this option&lt;/strong>, navigate to this &lt;a href="https://optimization.rigor.com/s/2373818/?sh=3AF8C48AADD6D3E5F5DAA8B4B7BB7F45" target="_blank">page&lt;/a>
.&lt;/p>
&lt;p>&lt;img src="../../images/image31.png" alt="placeholder">&lt;/p>
&lt;p>Click the &amp;ldquo;&lt;strong>Best Practices Score&lt;/strong>&amp;rdquo; tab. Scroll down, and review all the findings&lt;/p>
&lt;p>&lt;img src="../../images/image23.png" alt="placeholder">&lt;/p>
&lt;p>&lt;img src="../../images/best-practices.png" alt="Best Practices">&lt;/p>
&lt;p>Spend some time to review the findings. Click into any line item&lt;/p>
&lt;h2 id="4-create-mobile-check">4. Create Mobile Check&lt;/h2>
&lt;p>Copy the RBC you created above:&lt;/p>
&lt;p>&lt;img src="../../images/copy-check.png" alt="Copy Check">&lt;/p>
&lt;p>Rename it, for example: &lt;strong>RWC - Checkout Flow (Tablet)&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/rename-check.png" alt="Copy Check">&lt;/p>
&lt;p>Under the &lt;strong>Advanced&lt;/strong> tab, update the following three settings and create your new mobile RBC.&lt;/p>
&lt;p>&lt;img src="../../images/image18.png" alt="placeholder">&lt;/p>
&lt;p>Test &amp;amp; Validate the new monitor&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p class="alert-heading">Tip&lt;/p>
&lt;p class="alert-body">
&lt;p>As you are creating the steps try using the &lt;a href="https://help.rigor.com/hc/en-us/articles/360049442854-How-Do-I-Use-Business-Transactions" target="_blank">Business Transaction&lt;/a>
&lt;p>feature in Splunk Synthetic Monitoring. &lt;em>“Business Transactions are a combined group of contiguous steps in a Real Browser script that are to be measured as a whole. These transactions logically group similar parts of a flow together, so that users can view the performance of multiple steps and page(s) grouped under one Business Transaction.&amp;quot;&lt;/em>&lt;/p>&lt;/p>
&lt;/p>
&lt;/div>
&lt;h2 id="5-resources">5. Resources&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004652007?flash_digest=b1ef7d1a07b68d5279ee5fef8adb87fb878cf010" target="_blank">Getting Started With Selenium IDE&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www2.rigor.com/scripting-guide" target="_blank">Splunk Synthetic Monitoring Scripting Guide&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004443988-How-Can-I-Fix-A-Broken-Script" target="_blank">How Can I Fix A Broken Script?&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction" target="_blank">Introduction to the DOM&lt;/a>
(Document Object Model (DOM)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.selenium.dev/selenium-ide/" target="_blank">Selenium IDE&lt;/a>
&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Synthetics: API Checks</title><link>https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/api-checks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.6/synthetics/docs/api-checks/</guid><description>
&lt;p>The API Check provides a flexible way to check the functionality and performance of API endpoints. The shift toward API-first development has magnified the necessity to monitor the back-end services that provide your core front-end functionality. Whether you&amp;rsquo;re interested in testing the multi-step API interactions or you want to gain visibility into the performance of your endpoints, the API Check can help you accomplish your goals.&lt;/p>
&lt;h2 id="1-create-a-global-variable">1. Create a Global Variable&lt;/h2>
&lt;p>View the global variable that we&amp;rsquo;ll use to perform our API check. Click on &lt;strong>Global Variables&lt;/strong> under &lt;strong>Admin Tools&lt;/strong>. View the global variable that we&amp;rsquo;ll use to make the spotify API transaction&lt;/p>
&lt;p>&lt;img src="../../images/global-variable.png" alt="placeholder">&lt;/p>
&lt;h2 id="2-create-an-api-check">2. Create an API Check&lt;/h2>
&lt;p>Create a new API Check and name it &lt;code>&amp;lt;your initials&amp;gt;&lt;/code> followed by Splunk REST API Check for example: &lt;strong>AP - Spotify API&lt;/strong>&lt;/p>
&lt;p>&lt;img src="../../images/new-api-check.png" alt="placeholder">&lt;/p>
&lt;p>Take a second to explore the notification tab after you&amp;rsquo;ve named your check&lt;/p>
&lt;p>Add the following API Check Steps:&lt;/p>
&lt;p>&lt;img src="../../images/api-check-steps.png" alt="placeholder">&lt;/p>
&lt;p>Available Variables to choose from:&lt;/p>
&lt;p>&lt;img src="../../images/available-variables.png" alt="placeholder">&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004583747-API-Check-Request-Step" target="_blank">Request Step&lt;/a>
&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>A Request Step makes an HTTP request to some endpoint and collects data from that interaction. Unlike other check types, API Checks do not require an initial URL to start the check. All HTTP requests are configured within Request Steps.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004582607-API-Check-Extract-Step" target="_blank">Extract Step&lt;/a>
&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>An Extract Step extracts data out of JSON, XML, or HTML formatted data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To extract data out of JSON, supply three things:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The source containing the JSON,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The JSONPath expression to extract out the data, and&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The name of the custom variable that you want to save to.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The source can be any JSON, but most likely will come from the response body. The source could also come from a response header or can be a custom value. The source must be well-formed JSON.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004743868-API-Check-Save-Step" target="_blank">Save Step&lt;/a>
&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A Save Step stores some data to be reused later in the check. To save data, supply the source and the name of the custom variable to save to. The source can be selected from the presets, including response headers, or by providing a custom value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Some additional use cases are appending bits of information to easily reuse in other steps and saving the results from one request to be reused after another request is made.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is important to remember that request variables are only available after a request is made. If you try to save a value from a request but haven&amp;rsquo;t made a request yet, then an empty string will be saved.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004742408-API-Check-Assert-Step" target="_blank">Assert Step&lt;/a>
&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>An Assert Step makes an assertion on two values. To make an assertion, supply two parameters along with the comparison that you would like to perform between the two.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004742408-API-Check-Assert-Step" target="_blank">Comparisons&lt;/a>
&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>We currently support 3 types of comparisons: &lt;strong>string&lt;/strong>, &lt;strong>numeric&lt;/strong>, and &lt;strong>regular expression&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For &lt;strong>string&lt;/strong> and &lt;strong>numeric&lt;/strong> comparisons, values are coerced to the comparison type before the comparison is made.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For a &lt;strong>regular expression&lt;/strong> comparison, the first parameter is a string and the second parameter is a regular expression.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Tag your API Check with Splunk and API and &lt;strong>SAVE&lt;/strong> it&lt;/p>
&lt;p>&lt;img src="../../images/tags.png" alt="placeholder">&lt;/p>
&lt;h2 id="3-test-your-rest-api-check">3. Test your REST API Check&lt;/h2>
&lt;p>Press got back into the edit configuration and press &amp;lsquo;test&amp;rsquo; at the bottom of the page to ensure there are no errors&lt;/p>
&lt;p>&lt;img src="../../images/test-api-check.png" alt="placeholder">&lt;/p>
&lt;p>Slide the window up to view details about the successful run&lt;/p>
&lt;p>&lt;img src="../../images/successful-run.png" alt="placeholder">&lt;/p>
&lt;p>&lt;img src="../../images/request-step.png" alt="placeholder">&lt;/p>
&lt;p>Now, let&amp;rsquo;s add some more functionality to the monitor. Slide the detailed window back down and add steps 5-8&lt;/p>
&lt;p>&lt;strong>BONUS&lt;/strong>: use step 6 to assert that the following response came back in a timely manner (1000 ms)&lt;/p>
&lt;p>&lt;img src="../../images/additional-steps.png" alt="placeholder">&lt;/p>
&lt;p>Once the steps are added, test &amp;amp; save the monitor.&lt;/p>
&lt;h2 id="4-resources">4. Resources&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004817308-How-to-Create-an-API-Check" target="_blank">How to Create an API Check&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://help.rigor.com/hc/en-us/articles/115004952508-API-Check-Overview" target="_blank">API Check Overview&lt;/a>
&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://help.rigor.com/hc/en-us/articles/360049442854-How-Do-I-Use-Business-Transactions" target="_blank">How Do I Use Business Transactions?&lt;/a>
&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops – Get Data In</title><link>https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/</link><description>Recent content in Get Data In on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/index.xml" rel="self" type="application/rss+xml"/><item><title>Imt: Deploying the OpenTelemetry Collector in Kubernetes</title><link>https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/k3s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/k3s/</guid><description>
&lt;ul>
&lt;li>Splunk Helm chartを使用して、K3s に OpenTelemetry Collector をインストールします&lt;/li>
&lt;li>Kubernetes Navigatorでクラスタを探索します&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1-access-tokenの取得">1. Access Tokenの取得&lt;/h2>
&lt;p>Kubernetes が起動したら、Splunk の UI から Access Token&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> を取得する必要があります。&lt;/p>
&lt;p>Access Token は、左上のハンバーガーメニューから「&lt;strong>Organization Settings → Access Tokens&lt;/strong>」を選択すると表示されます。&lt;/p>
&lt;p>&lt;strong>Default&lt;/strong> トークンを開き、&lt;strong>Show Token&lt;/strong> をクリックしてトークンを公開します。&lt;strong>Copy&lt;/strong>{: .label-button .sfx-ui-button-grey} ボタンをクリックして、クリップボードにコピーします。&lt;/p>
&lt;p>&lt;img src="../../../images/access-token.png" alt="Access Token">&lt;/p>
&lt;p>また、Splunk アカウントの Realm&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> の名前を取得する必要があります。 ハンバーガーメニューから自分の名前をクリックし、&lt;strong>Account Settings&lt;/strong> を選択します。&lt;/p>
&lt;p>Realm はページの中央にある Organizations セクションにあります。 この例では「us0」となっています。&lt;/p>
&lt;p>&lt;img src="../../../images/account-settings.png" alt="Account Settings">&lt;/p>
&lt;hr>
&lt;h2 id="2-helmによるインストール">2. Helmによるインストール&lt;/h2>
&lt;p>環境変数 &lt;code>ACCESS_TOKEN&lt;/code> と &lt;code>REALM&lt;/code> を作成して、進行中の Helm のインストールコマンドで使用します。例えば、レルムが &lt;code>us1&lt;/code> の場合は、&lt;code>export REALM=us1&lt;/code> と入力し、&lt;code>eu0&lt;/code> の場合は、&lt;code>export REALM=eu0&lt;/code> と入力します。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
export ACCESS_TOKEN=&amp;lt;replace_with_default_access_token&amp;gt;
export REALM=&amp;lt;replace_with_splunk_realm&amp;gt;
```
&lt;/code>&lt;/pre>
&lt;p>Splunk Helmチャートを使ってOpenTelemetry Collectorをインストールします。まず、Splunk Helm chartのリポジトリをHelmに追加してアップデートします。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart &amp;amp;&amp;amp; helm repo update
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力例&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
Using ACCESS_TOKEN=&amp;lt;redacted&amp;gt;
Using REALM=eu0
&amp;quot;splunk-otel-collector-chart&amp;quot; has been added to your repositories
Using ACCESS_TOKEN=&amp;lt;redacted&amp;gt;
Using REALM=eu0
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the &amp;quot;splunk-otel-collector-chart&amp;quot; chart repository
Update Complete. ⎈Happy Helming!⎈
```
&lt;/code>&lt;/pre>
&lt;p>以下のコマンドでOpenTelemetry Collector Helmチャートをインストールします。&lt;strong>変更しないでください&lt;/strong>。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
helm install splunk-otel-collector \
--set=&amp;quot;splunkRealm=$REALM&amp;quot; \
--set=&amp;quot;splunkAccessToken=$ACCESS_TOKEN&amp;quot; \
--set=&amp;quot;clusterName=$(hostname)-k3s-cluster&amp;quot; \
--set=&amp;quot;logsEnabled=false&amp;quot; \
--set=&amp;quot;environment=$(hostname)-apm-env&amp;quot; \
splunk-otel-collector-chart/splunk-otel-collector \
-f ~/workshop/k3s/otel-collector.yaml
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力例&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
Using ACCESS_TOKEN=&amp;lt;redacted&amp;gt;
Using REALM=eu0
NAME: splunk-otel-collector
LAST DEPLOYED: Fri May 7 11:19:01 2021
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
```
&lt;/code>&lt;/pre>
&lt;p>&lt;code>kubectl get pods&lt;/code> を実行すると、約30秒程度待つと新しいポッドが稼働していることが報告され、デプロイメントの進捗を監視することができます。&lt;/p>
&lt;p>続行する前に、ステータスがRunningと報告されていることを確認してください。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
kubectl get pods
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力例&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
NAME READY STATUS RESTARTS AGE
splunk-otel-collector-agent-2sk6k 0/1 Running 0 10s
splunk-otel-collector-k8s-cluster-receiver-6956d4446f-gwnd7 0/1 Running 0 10s
```
&lt;/code>&lt;/pre>
&lt;p>OpenTelemetry Collector podのログを確認して、エラーがないことを確認します。出力は、以下の出力例にあるログに似ているはずです。&lt;/p>
&lt;p>ログを確認するには、&lt;code>helm&lt;/code> のインストールで設定したラベルを使用してください（終了するには ++ctrl+c++ を押します）。もしくは、インストールされている &lt;code>k9s&lt;/code> ターミナル UI を使うとボーナスポイントがもらえます！&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
kubectl logs -l app=splunk-otel-collector -f
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力例&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
2021-03-21T16:11:10.900Z INFO service/service.go:364 Starting receivers...
2021-03-21T16:11:10.900Z INFO builder/receivers_builder.go:70 Receiver is starting... {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;prometheus&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;prometheus&amp;quot;}
2021-03-21T16:11:11.009Z INFO builder/receivers_builder.go:75 Receiver started. {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;prometheus&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;prometheus&amp;quot;}
2021-03-21T16:11:11.009Z INFO builder/receivers_builder.go:70 Receiver is starting... {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;k8s_cluster&amp;quot;}
2021-03-21T16:11:11.009Z INFO k8sclusterreceiver@v0.21.0/watcher.go:195 Configured Kubernetes MetadataExporter {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;exporter_name&amp;quot;: &amp;quot;signalfx&amp;quot;}
2021-03-21T16:11:11.009Z INFO builder/receivers_builder.go:75 Receiver started. {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;k8s_cluster&amp;quot;}
2021-03-21T16:11:11.009Z INFO healthcheck/handler.go:128 Health Check state change {&amp;quot;component_kind&amp;quot;: &amp;quot;extension&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;health_check&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;health_check&amp;quot;, &amp;quot;status&amp;quot;: &amp;quot;ready&amp;quot;}
2021-03-21T16:11:11.009Z INFO service/service.go:267 Everything is ready. Begin running and processing data.
2021-03-21T16:11:11.009Z INFO k8sclusterreceiver@v0.21.0/receiver.go:59 Starting shared informers and wait for initial cache sync. {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;k8s_cluster&amp;quot;}
2021-03-21T16:11:11.281Z INFO k8sclusterreceiver@v0.21.0/receiver.go:75 Completed syncing shared informer caches. {&amp;quot;component_kind&amp;quot;: &amp;quot;receiver&amp;quot;, &amp;quot;component_type&amp;quot;: &amp;quot;k8s_cluster&amp;quot;, &amp;quot;component_name&amp;quot;: &amp;quot;k8s_cluster&amp;quot;}
```
&lt;/code>&lt;/pre>
&lt;p>!!! info &amp;ldquo;インストールに失敗した場合に削除する&amp;rdquo;
OpenTelemetry Collectorのインストールに失敗した場合は、次のようにしてインストールを削除することで、最初からやり直すことができます。&lt;/p>
&lt;pre>&lt;code>`helm delete splunk-otel-collector`
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="3-ui-でのメトリクスの検証">3. UI でのメトリクスの検証&lt;/h2>
&lt;p>Splunk の UI で左上のハンバーガーメニューから &lt;strong>Infrastructure&lt;/strong> をクリックします。&lt;/p>
&lt;p>&lt;img src="../../../images/clustermap-nav.png" alt="Kubernetes Navigator Mapの選択">&lt;/p>
&lt;p>&lt;strong>Containers&lt;/strong> の下にある &lt;strong>Kubernetes&lt;/strong> をクリックしてKubernetes Navigator Cluster Map を開き、メトリクスが送信されていることを確認します。&lt;/p>
&lt;p>クラスタが検出され、レポートされていることを確認するには、自分のクラスタを探します（ワークショップでは、他の多くのクラスタが表示されます）。クラスタ名を見つけるには、以下のコマンドを実行し、出力をクリップボードにコピーしてください。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
echo $(hostname)-k3s-cluster
```
&lt;/code>&lt;/pre>
&lt;p>次にUIで、Splunkロゴのすぐ下にある「Cluster: - 」メニューをクリックし、コピーしたばかりのクラスタ名を検索ボックスに貼り付け、ボックスをクリックしてクラスタを選択し、最後にメニューから空白をクリックしてフィルタを適用します。&lt;/p>
&lt;p>&lt;img src="../../../images/search-k3s-cluster.png" alt="K8S Clusters Filter">&lt;/p>
&lt;p>&lt;img src="../../../images/selecting-k3s-cluster.png" alt="Select K8S Cluster">&lt;/p>
&lt;p>&lt;img src="../../../images/filtered-k3s-cluster.png" alt="Filtered K8S Cluster">&lt;/p>
&lt;p>ノードの状態を確認するには、クラスターの淡いブルーの背景にカーソルを置き、左上に表示される青い虫眼鏡をクリックしてください &lt;img src="../../../images/blue-cross.png" alt="Magnifying Glass">。&lt;/p>
&lt;p>これで、ノードレベルまでドリルダウンできます。 次に、サイドバーボタンをクリックしてサイドバーを開き、Metricsサイドバーを開きます。&lt;/p>
&lt;p>サイドのスライダーを使って、CPU、メモリ、ネットワーク、イベントなど、クラスタ/ノードに関連する様々なチャートを見ることができます。&lt;/p>
&lt;p>&lt;img src="../../../images/explore-metrics.png" alt="Sidebar metrics">&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Access Tokens (Org Tokensと呼ばれることもあります)は、長期間利用を前提とした組織レベルのトークンです。デフォルトでは、これらのトークンは 5 年間保存されます。そのため、長期間にわたってデータポイントを送信するエミッターに組み込んだり、Splunk API を呼び出す長期的なスクリプトに使用したりするのに適しています。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Realm とは、Splunk内部の管理単位ので、その中で組織がホストされます。異なる Realm には異なる API エンドポイントがあります (たとえば、データを送信するためのエンドポイントは、&lt;strong>&lt;code>us1&lt;/code>&lt;/strong> realm では &lt;code>ingest.us1.signalfx.com&lt;/code> 、&lt;strong>&lt;code>eu0&lt;/code>&lt;/strong> レルムでは &lt;code>ingest.eu0.signalfx.com&lt;/code> となります)。このrealm名は、Splunk UI のプロファイルページに表示されます。エンドポイントを指定する際にレルム名を含めない場合、Splunk は &lt;strong>&lt;code>us0&lt;/code>&lt;/strong> レルムを指していると解釈します。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Imt: Deploying NGINX in K3s</title><link>https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.6/ja/imt/docs/gdi/nginx/</guid><description>
&lt;ul>
&lt;li>NGINX ReplicaSet を K3s クラスタにデプロイし、NGINX デプロイメントのディスカバリーを確認します。&lt;/li>
&lt;li>負荷テストを実行してメトリクスを作成し、Splunk Observability Cloudにストリーミングすることを確認します！&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1-nginx-の起動">1. NGINX の起動&lt;/h2>
&lt;p>Splunk UI で &lt;strong>WORKLOADS&lt;/strong> タブを選択して、実行中の Pod の数を確認します。これにより、クラスタ上のワークロードの概要がわかるはずです。&lt;/p>
&lt;p>&lt;img src="../../../images/k8s-workloads.png" alt="ワークロードエージェント">&lt;/p>
&lt;p>デフォルトの Kubernetes Pod のうち、ノードごとに実行されている単一のエージェントコンテナに注目してください。この1つのコンテナが、このノードにデプロイされているすべての Pod とサービスを監視します！&lt;/p>
&lt;p>次に、&lt;strong>MAP&lt;/strong> タブを選択してデフォルトのクラスタノードビューに戻し、再度クラスタを選択します。&lt;/p>
&lt;p>Multipass または AWS/EC2 のシェルセッションで、&lt;code>nginx&lt;/code> ディレクトリに移動します。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
cd ~/workshop/k3s/nginx
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="2-nginxのデプロイメント作成">2. NGINXのデプロイメント作成&lt;/h2>
&lt;p>NGINX の &lt;code>configmap&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> を &lt;code>nginx.conf&lt;/code> ファイルを使って作成します。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
kubectl create configmap nginxconfig --from-file=nginx.conf
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
configmap/nginxconfig created
```
&lt;/code>&lt;/pre>
&lt;p>続いて、デプロイメントを作成します。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
kubectl create -f nginx-deployment.yaml
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
deployment.apps/nginx created
service/nginx created
```
&lt;/code>&lt;/pre>
&lt;p>次に、NGINXに対するロードテストを作成するための Locust&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> をデプロイします。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
kubectl create -f locust-deployment.yaml
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
deployment.apps/nginx-loadgenerator created
service/nginx-loadgenerator created
```
&lt;/code>&lt;/pre>
&lt;p>デプロイメントが成功し、Locust と NGINX Podが動作していることを確認します。&lt;/p>
&lt;p>Splunk UI を開いていれば、新しい Pod が起動し、コンテナがデプロイされているのがわかるはずです。&lt;/p>
&lt;p>Pod が実行状態に移行するまでには 20 秒程度しかかかりません。Splunk UIでは、以下のようなクラスタが表示されます。&lt;/p>
&lt;p>&lt;img src="../../../images/cluster.png" alt="Back to Cluster">&lt;/p>
&lt;p>もう一度 &lt;strong>WORKLOADS&lt;/strong> タブを選択すると、新しい ReplicaSet と NGINX 用のデプロイメントが追加されていることがわかります。&lt;/p>
&lt;p>&lt;img src="../../../images/k8s-workloads-nginx.png" alt="NGINX loaded">&lt;/p>
&lt;hr>
&lt;p>これをシェルでも検証してみましょう。&lt;/p>
&lt;p>=== &amp;ldquo;シェルコマンド&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
kubectl get pods
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;出力&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
NAME READY STATUS RESTARTS AGE
splunk-otel-collector-k8s-cluster-receiver-77784c659c-ttmpk 1/1 Running 0 9m19s
splunk-otel-collector-agent-249rd 1/1 Running 0 9m19s
svclb-nginx-vtnzg 1/1 Running 0 5m57s
nginx-7b95fb6b6b-7sb9x 1/1 Running 0 5m57s
nginx-7b95fb6b6b-lnzsq 1/1 Running 0 5m57s
nginx-7b95fb6b6b-hlx27 1/1 Running 0 5m57s
nginx-7b95fb6b6b-zwns9 1/1 Running 0 5m57s
svclb-nginx-loadgenerator-nscx4 1/1 Running 0 2m20s
nginx-loadgenerator-755c8f7ff6-x957q 1/1 Running 0 2m20s
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="3-locustの負荷テストの実行">3. Locustの負荷テストの実行&lt;/h2>
&lt;p>EC2 インスタンスの IP アドレスの8080番ポートで Locust が利用できます。Webブラウザで新しいタブを開き、&lt;code>http://{==EC2-IP==}:8080/&lt;/code>にアクセスすると、Locust が動作しているのが確認できます。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust.png" alt="Locust">&lt;/p>
&lt;p>&lt;strong>Spawn rate&lt;/strong> を 2 に設定し、&lt;strong>Start Swarming&lt;/strong> をクリックします。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust-spawn-rate.png" alt="Locust Spawn Rate">&lt;/p>
&lt;p>これにより、アプリケーションに緩やかな連続した負荷がかかるようになります。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust-statistics.png" alt="Locust Statistics">&lt;/p>
&lt;p>ハンバーガーメニューから &lt;strong>Dashboards → NGINX → NGINX Servers&lt;/strong> を選択して、UIにメトリクスが表示されていることを確認します。&lt;strong>Overrides&lt;/strong> フィルターを適用して、 &lt;code>k8s.cluster.name:&lt;/code> に、ターミナルの　&lt;code>echo $(hostname)-k3s-cluster&lt;/code> で返されるクラスタの名前を見つけます。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-dashboard.png" alt="NGINXダッシュボード">&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>ConfigMap とは、キーと値のペアで非機密データを保存するために使用される API オブジェクトです。Pod は、環境変数、コマンドライン引数、またはボリューム内の構成ファイルとして ConfigMap を利用することができます。ConfigMap を使用すると、環境固有の構成をコンテナイメージから切り離すことができるため、アプリケーションの移植が容易になります。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://locust.io/" target="_blank">Locust とは？&lt;/a>
.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>
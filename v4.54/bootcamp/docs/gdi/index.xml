<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops â€“ Lab: OpenTelemetry &amp; Get Data In (GDI)</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/</link><description>Recent content in Lab: OpenTelemetry &amp; Get Data In (GDI) on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/index.xml" rel="self" type="application/rss+xml"/><item><title>Bootcamp: Create a Monolith Service</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/monolith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/monolith/</guid><description>
&lt;p>Checkout the milestone for this task. See the introduction for a brief howto.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git reset --hard &lt;span style="color:#555">&amp;amp;&amp;amp;&lt;/span> git clean -fdx &lt;span style="color:#555">&amp;amp;&amp;amp;&lt;/span> git checkout 01service&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Let&amp;rsquo;s get python sorted first. On a provided AWS instance, &lt;code>python3&lt;/code> is already available.&lt;/p>
&lt;p>If you are on a Mac:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-01-00-tab" data-toggle="tab" href="#tabs-01-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-01-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active"
id="tabs-01-00" role="tabpanel" aria-labelled-by="tabs-01-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install python@3&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>On another system, install a recent version of python (i.e. 3.x) with your package manager.&lt;/p>
&lt;p>Navigate to &lt;code>o11y-bootcamp/bootcamp/service/src&lt;/code> and run the provided python service:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-02-00-tab" data-toggle="tab" href="#tabs-02-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-02-00" aria-selected="false">
Shell Command: python3
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link persistLang-text"
id="tabs-02-01-tab" data-toggle="tab" href="#tabs-02-01" role="tab"
onclick="persistLang(&amp;#34;text&amp;#34;);"aria-controls="tabs-02-01" aria-selected="false">
Example Output python3
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">
&lt;div class="tab-pane fade show active"
id="tabs-02-00" role="tabpanel" aria-labelled-by="tabs-02-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 -m venv .venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">source&lt;/span> .venv/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -r requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 app.py&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-02-01" role="tabpanel" aria-labelled-by="tabs-02-01-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>* Serving Flask app &amp;#39;app&amp;#39; (lazy loading)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Environment: production
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARNING: This is a development server. Do not use it in a production deployment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use a production WSGI server instead.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Debug mode: off
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Running on all addresses.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WARNING: This is a development server. Do not use it in a production deployment.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>* Running on http://10.42.1.202:5000/ (Press CTRL+C to quit)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Then test the service in a separate shell in the &lt;code>~/o11y-bootcamp/bootcamp/service/src&lt;/code> directory with:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-03-00-tab" data-toggle="tab" href="#tabs-03-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-03-00" aria-selected="false">
Shell Command: curl
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link persistLang-json"
id="tabs-03-01-tab" data-toggle="tab" href="#tabs-03-01" role="tab"
onclick="persistLang(&amp;#34;json&amp;#34;);"aria-controls="tabs-03-01" aria-selected="false">
Example Output: curl
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active"
id="tabs-03-00" role="tabpanel" aria-labelled-by="tabs-03-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST http://127.0.0.1:5000/wordcount -F &lt;span style="color:#033">text&lt;/span>&lt;span style="color:#555">=&lt;/span>@hamlet.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-03-01" role="tabpanel" aria-labelled-by="tabs-03-01-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[[&lt;span style="color:#c30">&amp;#34;in&amp;#34;&lt;/span>, &lt;span style="color:#f60">436&lt;/span>], [&lt;span style="color:#c30">&amp;#34;hamlet&amp;#34;&lt;/span>, &lt;span style="color:#f60">484&lt;/span>], [&lt;span style="color:#c30">&amp;#34;my&amp;#34;&lt;/span>, &lt;span style="color:#f60">514&lt;/span>], [&lt;span style="color:#c30">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#f60">546&lt;/span>], [&lt;span style="color:#c30">&amp;#34;i&amp;#34;&lt;/span>, &lt;span style="color:#f60">546&lt;/span>], [&lt;span style="color:#c30">&amp;#34;you&amp;#34;&lt;/span>, &lt;span style="color:#f60">550&lt;/span>], [&lt;span style="color:#c30">&amp;#34;of&amp;#34;&lt;/span>, &lt;span style="color:#f60">671&lt;/span>], [&lt;span style="color:#c30">&amp;#34;to&amp;#34;&lt;/span>, &lt;span style="color:#f60">763&lt;/span>], [&lt;span style="color:#c30">&amp;#34;and&amp;#34;&lt;/span>, &lt;span style="color:#f60">969&lt;/span>], [&lt;span style="color:#c30">&amp;#34;the&amp;#34;&lt;/span>, &lt;span style="color:#f60">1143&lt;/span>]]&lt;span style="color:#a00;background-color:#faa">%&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The bootcamp contains other text files at &lt;code>~/nlp/resources/corpora&lt;/code>. To use a random example:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-04-00-tab" data-toggle="tab" href="#tabs-04-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-04-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">
&lt;div class="tab-pane fade show active"
id="tabs-04-00" role="tabpanel" aria-labelled-by="tabs-04-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">SAMPLE&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">$(&lt;/span>find ~/nlp/resources/corpora/gutenberg -name &lt;span style="color:#c30">&amp;#39;*.txt&amp;#39;&lt;/span> | shuf -n1&lt;span style="color:#069;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -X POST http://127.0.0.1:5000/wordcount -F &lt;span style="color:#033">text&lt;/span>&lt;span style="color:#555">=&lt;/span>@&lt;span style="color:#033">$SAMPLE&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>To generate load:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-5" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-05-00-tab" data-toggle="tab" href="#tabs-05-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-05-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-5-content">
&lt;div class="tab-pane fade show active"
id="tabs-05-00" role="tabpanel" aria-labelled-by="tabs-05-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">FILES&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">$(&lt;/span>find ~/nlp/resources/corpora/gutenberg -name &lt;span style="color:#c30">&amp;#39;*.txt&amp;#39;&lt;/span>&lt;span style="color:#069;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">while&lt;/span> true; &lt;span style="color:#069;font-weight:bold">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#033">SAMPLE&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">$(&lt;/span>shuf -n1 &lt;span style="color:#555">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#c30">&amp;#34;&lt;/span>&lt;span style="color:#033">$FILES&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>&lt;span style="color:#069;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curl -X POST http://127.0.0.1:5000/wordcount -F &lt;span style="color:#033">text&lt;/span>&lt;span style="color:#555">=&lt;/span>@&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">SAMPLE&lt;/span>&lt;span style="color:#a00">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep &lt;span style="color:#f60">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Bootcamp: Add Prometheus metrics</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/prometheus/</guid><description>
&lt;p>We need visibility into performance - let us add metrics with &lt;a href="https://prometheus.io/docs/introduction/overview/#architecture" target="_blank">Prometheus&lt;/a>
.&lt;/p>
&lt;p>Install the &lt;a href="https://pypi.org/project/prometheus-client/" target="_blank">Python Prometheus client&lt;/a>
as a dependency:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">echo&lt;/span> &lt;span style="color:#c30">&amp;#34;prometheus-client&amp;#34;&lt;/span> &amp;gt;&amp;gt; requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>python3 -m venv .venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">source&lt;/span> .venv/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.venv/bin/pip install -r requirements.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Import the modules by editing &lt;code>app.py&lt;/code>. These imports go towards the top of the file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">import&lt;/span> &lt;span style="color:#0cf;font-weight:bold">prometheus_client&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">from&lt;/span> &lt;span style="color:#0cf;font-weight:bold">prometheus_client.exposition&lt;/span> &lt;span style="color:#069;font-weight:bold">import&lt;/span> CONTENT_TYPE_LATEST
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">from&lt;/span> &lt;span style="color:#0cf;font-weight:bold">prometheus_client&lt;/span> &lt;span style="color:#069;font-weight:bold">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Define a metrics endpoint before &lt;code>@app.route('/wordcount', methods=['POST'])&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#99f">@app.route&lt;/span>(&lt;span style="color:#c30">&amp;#39;/metrics&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">def&lt;/span> &lt;span style="color:#c0f">metrics&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">return&lt;/span> Response(prometheus_client&lt;span style="color:#555">.&lt;/span>generate_latest(), mimetype&lt;span style="color:#555">=&lt;/span>CONTENT_TYPE_LATEST)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And use this python snippet after &lt;code>app = Flask(__name__)&lt;/code> to define a new counter metric:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>c_recv &lt;span style="color:#555">=&lt;/span> Counter(&lt;span style="color:#c30">&amp;#39;characters_recv&amp;#39;&lt;/span>, &lt;span style="color:#c30">&amp;#39;Number of characters received&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Increase the counter metric after &lt;code>data = request.files['text'].read().decode('utf-8')&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>c_recv&lt;span style="color:#555">.&lt;/span>inc(&lt;span style="color:#366">len&lt;/span>(data))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Test that the application exposes metrics by hitting the endpoint while the app is running:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-01-00-tab" data-toggle="tab" href="#tabs-01-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-01-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active"
id="tabs-01-00" role="tabpanel" aria-labelled-by="tabs-01-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl http://127.0.0.1:5000/metrics&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The milestone for this task is &lt;code>02service-metrics&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Deploy OpenTelemetry in Docker</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel/</guid><description>
&lt;p>You will need an access token for Splunk Observability Cloud. Set them up as environment variables:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">export&lt;/span> &lt;span style="color:#033">SPLUNK_ACCESS_TOKEN&lt;/span>&lt;span style="color:#555">=&lt;/span>YOURTOKEN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#366">export&lt;/span> &lt;span style="color:#033">SPLUNK_REALM&lt;/span>&lt;span style="color:#555">=&lt;/span>YOURREALM
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Start with the &lt;a href="https://github.com/signalfx/splunk-otel-collector/blob/main/cmd/otelcol/config/collector/agent_config.yaml" target="_blank">default configuration&lt;/a>
for the &lt;a href="https://github.com/signalfx/splunk-otel-collector" target="_blank">OpenTelemetry Collector&lt;/a>
and name it &lt;code>collector.yaml&lt;/code> in the &lt;code>src&lt;/code> directory.&lt;/p>
&lt;p>You can also start with a blank configuration, which is what the milestone does for clarity.&lt;/p>
&lt;p>Then run OpenTelemetry Collector with this configuration in a docker container:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --rm &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -e &lt;span style="color:#033">SPLUNK_ACCESS_TOKEN&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">SPLUNK_ACCESS_TOKEN&lt;/span>&lt;span style="color:#a00">}&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -e &lt;span style="color:#033">SPLUNK_REALM&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">SPLUNK_REALM&lt;/span>&lt;span style="color:#a00">}&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -e &lt;span style="color:#033">SPLUNK_CONFIG&lt;/span>&lt;span style="color:#555">=&lt;/span>/etc/collector.yaml &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -p 13133:13133 -p 14250:14250 -p 14268:14268 -p 4317:4317 &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -p 6060:6060 -p 8888:8888 -p 9080:9080 -p 9411:9411 -p 9943:9943 &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -v &lt;span style="color:#c30">&amp;#34;&lt;/span>&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">PWD&lt;/span>&lt;span style="color:#a00">}&lt;/span>&lt;span style="color:#c30">/collector.yaml&amp;#34;&lt;/span>:/etc/collector.yaml:ro &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> --name otelcol quay.io/signalfx/splunk-otel-collector:0.41.1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The milestone for this task is &lt;code>03service-metrics-otel&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Capture Prometheus metrics</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-prometheus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-prometheus/</guid><description>
&lt;p>Add a &lt;a href="https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/simpleprometheusreceiver" target="_blank">prometheus receiver&lt;/a>
to the OpenTelemetry Collector configuration so that it captures the metrics introduced in Task 2 from the application.&lt;/p>
&lt;p>Hint: The hostname &lt;code>host.docker.internal&lt;/code> allows you to access the host from within a docker container. Add&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>--add-host&lt;span style="color:#555">=&lt;/span>host.docker.internal:host-gateway
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to the docker run command for the OpenTelemetry collector.
TODO test instructions&lt;/p>
&lt;p>Validate that you are getting data for the custom metric &lt;code>characters_recv_total&lt;/code> introduced in Task 2.&lt;/p>
&lt;p>The milestone for this task is &lt;code>04service-metrics-prom&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Dockerize the Service</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/docker/</guid><description>
&lt;p>Dockerize the service. Use this &lt;code>Dockerfile&lt;/code> as a skeleton:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#069;font-weight:bold">ARG&lt;/span> &lt;span style="color:#033">APP_IMAGE&lt;/span>&lt;span style="color:#555">=&lt;/span>python:3&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">FROM&lt;/span>&lt;span style="color:#c30"> $APP_IMAGE as base&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">FROM&lt;/span>&lt;span style="color:#c30"> base as builder&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#c30"> /app&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">RUN&lt;/span> python -m venv .venv &lt;span style="color:#555">&amp;amp;&amp;amp;&lt;/span> .venv/bin/pip install --no-cache-dir -U pip setuptools&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">COPY&lt;/span> requirements.txt .&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">RUN&lt;/span> .venv/bin/pip install -r requirements.txt --no-cache-dir -r requirements.txt&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">FROM&lt;/span>&lt;span style="color:#c30"> base&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">WORKDIR&lt;/span>&lt;span style="color:#c30"> /app&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">COPY&lt;/span> --from&lt;span style="color:#555">=&lt;/span>builder /app /app&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">COPY&lt;/span> app.py .&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>&lt;span style="color:#069;font-weight:bold">ENV&lt;/span> &lt;span style="color:#033">PATH&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#c30">&amp;#34;/app/.venv/bin:&lt;/span>&lt;span style="color:#033">$PATH&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add the &lt;a href="https://docs.docker.com/engine/reference/builder/#cmd" target="_blank">appropriate CMD&lt;/a>
at the end to launch the app.&lt;/p>
&lt;p>Stop other instances of the app if you had any running.&lt;/p>
&lt;p>Then build and run the image:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build . -t wordcount
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker run -p 5000:5000 wordcount:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Test the service in another shell:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-01-00-tab" data-toggle="tab" href="#tabs-01-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-01-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active"
id="tabs-01-00" role="tabpanel" aria-labelled-by="tabs-01-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST http://127.0.0.1:5000/wordcount -F &lt;span style="color:#033">text&lt;/span>&lt;span style="color:#555">=&lt;/span>@hamlet.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>The milestone for this task is &lt;code>05docker&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Container Orchestration</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/docker-compose/</guid><description>
&lt;p>The development team wants to use a containerized &lt;a href="https://redis.io/" target="_blank">redis&lt;/a>
cache to improve performance of the service.&lt;/p>
&lt;p>Stop any other running containers from this app or the OpenTelemetry Collector.&lt;/p>
&lt;p>Add a &lt;a href="https://docs.docker.com/compose/" target="_blank">docker-compose.yaml&lt;/a>
file for the python app to prepare us for running multiple containers.&lt;/p>
&lt;p>A skeleton to run the service on port 8000 might look like this. What port do you need to map 8000 to for the service to work?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>version: &lt;span style="color:#c30">&amp;#39;3&amp;#39;&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span>services:&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> yourservicename:&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> build: .&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> expose:&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> - &lt;span style="color:#c30">&amp;#34;8000&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> ports:&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a00;background-color:#faa">&lt;/span> - &lt;span style="color:#c30">&amp;#34;8000:XXXX&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build the service:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose build&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Then run the whole stack:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-01-00-tab" data-toggle="tab" href="#tabs-01-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-01-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active"
id="tabs-01-00" role="tabpanel" aria-labelled-by="tabs-01-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose up&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Test the service with curl by hitting the exposed port.&lt;/p>
&lt;p>The milestone for this task is &lt;code>06docker-compose&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Deploy OpenTelemetry in Docker Compose</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-docker-compose/</guid><description>
&lt;p>Add the &lt;a href="https://github.com/signalfx/splunk-otel-collector/tree/main/examples/docker-compose" target="_blank">OpenTelemetry Collector service definition&lt;/a>
to the docker-compose setup.&lt;/p>
&lt;p>Rebuild the docker-compose stack and run it.&lt;/p>
&lt;p>The milestone for this task is &lt;code>07docker-compose-otel&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Monitor Containerized Services</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-container-svc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/otel-container-svc/</guid><description>
&lt;p>The development team has started using other containerized services with docker compose. Switch to the provided milestone &lt;code>08docker-compose-redis&lt;/code> with the instructions from &amp;ldquo;Getting Started&amp;rdquo;.&lt;/p>
&lt;p>Add the &lt;a href="https://docs.splunk.com/Observability/gdi/redis/redis.html" target="_blank">redis monitor&lt;/a>
to the OpenTelemetry Collector configuration in &lt;code>collector.yaml&lt;/code> to get metrics from the [redis cache].&lt;/p>
&lt;p>Rebuild the docker-compose stack and run it.&lt;/p>
&lt;p>Check that you are getting data in the Redis dashboard:&lt;/p>
&lt;p>&lt;img src="../../../images/redis-dashboard.png" alt="Redis dashboard">&lt;/p>
&lt;p>The milestone for this task is &lt;code>08docker-compose-redis-otel&lt;/code>.&lt;/p></description></item><item><title>Bootcamp: Kubernetes</title><link>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.54/bootcamp/docs/gdi/k8s/</guid><description>
&lt;p>The development team has started using &lt;a href="https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/" target="_blank">Kubernetes&lt;/a>
for container orchestration. Switch to the provided milestone &lt;code>09k8s&lt;/code> with the instructions from &amp;ldquo;Getting Started&amp;rdquo;.&lt;/p>
&lt;p>Rebuild the container images for the private registry:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-00-00-tab" data-toggle="tab" href="#tabs-00-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-00-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">
&lt;div class="tab-pane fade show active"
id="tabs-00-00" role="tabpanel" aria-labelled-by="tabs-00-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose build&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Push the images to the private registry:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-01-00-tab" data-toggle="tab" href="#tabs-01-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-01-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">
&lt;div class="tab-pane fade show active"
id="tabs-01-00" role="tabpanel" aria-labelled-by="tabs-01-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker-compose push&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Then deploy the services into the cluster:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-02-00-tab" data-toggle="tab" href="#tabs-02-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-02-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">
&lt;div class="tab-pane fade show active"
id="tabs-02-00" role="tabpanel" aria-labelled-by="tabs-02-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f k8s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Test the service with&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-03-00-tab" data-toggle="tab" href="#tabs-03-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-03-00" aria-selected="false">
Shell Command
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">
&lt;div class="tab-pane fade show active"
id="tabs-03-00" role="tabpanel" aria-labelled-by="tabs-03-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">ENDPOINT&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#069;font-weight:bold">$(&lt;/span>kubectl get service/wordcount -o &lt;span style="color:#033">jsonpath&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#c30">&amp;#39;{.spec.clusterIP}&amp;#39;&lt;/span>&lt;span style="color:#069;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl http://&lt;span style="color:#033">$ENDPOINT&lt;/span>:8000/wordcount -F &lt;span style="color:#033">text&lt;/span>&lt;span style="color:#555">=&lt;/span>@hamlet.txt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>Configure and install an OpenTelemetry Collector using &lt;a href="https://github.com/signalfx/splunk-otel-collector-chart" target="_blank">Splunk&amp;#39;s helm chart&lt;/a>
:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Review the &lt;a href="https://github.com/signalfx/splunk-otel-collector-chart#how-to-install" target="_blank">configuration how-to&lt;/a>
and the &lt;a href="https://github.com/signalfx/splunk-otel-collector-chart/blob/main/docs/advanced-configuration.md" target="_blank">advanced configuration&lt;/a>
to create a &lt;code>values.yaml&lt;/code> that adds the required receivers for redis and prometheus.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the environment variables for realm,token and cluster name and pass them to &lt;code>helm&lt;/code> as arguments.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The milestone for this task is &lt;code>09k8s-otel&lt;/code>.&lt;/p></description></item></channel></rss>
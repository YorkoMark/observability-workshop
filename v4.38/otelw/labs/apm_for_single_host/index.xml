<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops – APM for a Single Host</title><link>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/</link><description>Recent content in APM for a Single Host on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/index.xml" rel="self" type="application/rss+xml"/><item><title>Otelw: Install Otel Collector On Host</title><link>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/host/</guid><description>
&lt;p>&lt;code>Splunk Observability -&amp;gt; Data Setup -&amp;gt; Linux&lt;/code>&lt;/p>
&lt;p>Choose the following:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Value&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Access Token&lt;/strong>&lt;/td>
&lt;td>Select from list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Mode&lt;/strong>&lt;/td>
&lt;td>Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Log Collection&lt;/strong>&lt;/td>
&lt;td>No&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Follow Data Setup Wizard for instructions on Linux installation:&lt;/p>
&lt;p>&lt;img src="../../../images/03-datasetup.png" alt="Data Setup">&lt;/p>
&lt;p>&lt;img src="../../../images/04-datasetup-linux.png" alt="Linux">&lt;/p>
&lt;p>&lt;img src="../../../images/05-datasetup-linuxinstall.png" alt="Linux Install">&lt;/p>
&lt;p>Check status of collector:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl status splunk-otel-collector
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Should output something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>● splunk-otel-collector.service - Splunk OpenTelemetry Collector
Loaded: loaded (/lib/systemd/system/splunk-otel-collector.service; enabled; vendor preset: enabled)
Drop-In: /etc/systemd/system/splunk-otel-collector.service.d
└─service-owner.conf
Active: active (running) since Sun 2021-10-31 13:07:27 UTC; 1min 11s ago
Main PID: 37949 (otelcol)
Tasks: 9 (limit: 19200)
Memory: 100.2M
CGroup: /system.slice/splunk-otel-collector.service
└─37949 /usr/bin/otelcol
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.556Z info builder/receivers_builder.go:73 &amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.556Z info builder/receivers_builder.go:68 &amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.556Z info builder/receivers_builder.go:73 &amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.556Z info healthcheck/handler.go:129 &amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.556Z info service/telemetry.go:92 Se&amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.557Z info service/telemetry.go:116 S&amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.557Z info service/collector.go:230 S&amp;gt;
Oct 31 13:07:27 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:27.557Z info service/collector.go:132 E&amp;gt;
Oct 31 13:07:37 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:37.826Z info hostmetadata/metadata.go:75 &amp;gt;
Oct 31 13:07:37 ip-172-31-70-180 otelcol[37949]: 2021-10-31T13:07:37.826Z info hostmetadata/metadata.go:83 &amp;gt;
&lt;/code>&lt;/pre>&lt;p>Your machine will be visible in Splunk Observability in &lt;code>Infrastructure&lt;/code> either in the public cloud platform you are using or &lt;code>My Data Center&lt;/code> if you are using Multipass or any other non public cloud machine.&lt;/p></description></item><item><title>Otelw: Python- Deploy HTTP Server and Client</title><link>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/python/</guid><description>
&lt;p>Each step should be performed in a separate terminal window.&lt;/p>
&lt;p>Make sure your Ubuntu environment was prepared properly as described in the &lt;strong>Preparation&lt;/strong> section.&lt;/p>
&lt;h2 id="configure-environment-variables-for-otel-and-run-python-flask-server">Configure Environment Variables for Otel and Run Python Flask Server&lt;/h2>
&lt;p>&lt;strong>Open the first terminal window&lt;/strong> in your Linux instance and set up environment and run Python Flask server using auto-instrumentation:&lt;/p>
&lt;p>!!! important
If you are doing this workshop as part of a group, before the next step, add your initials do the APM environment:
edit the &lt;code>run-server.sh&lt;/code> script below and add your initials to the environment i.e. change:&lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=apm-workshop&lt;/code>&lt;br>
to &lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=sjl-apm-workshop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/host/python
&lt;span style="color:#204a87">source&lt;/span> run-server.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see the server startup text when this is run.&lt;/p>
&lt;h2 id="run-python-client-application">Run Python Client Application&lt;/h2>
&lt;p>&lt;strong>Open a new terminal window&lt;/strong> in your Linux instance and run the Python client to sent POST requests to the Flask server:&lt;/p>
&lt;p>Run the client Python app via the &lt;code>splunk-py-trace&lt;/code> command to send requests to the Flask server:&lt;/p>
&lt;p>!!! important
If you are doing this workshop as part of a group, before the next step, add your initials do the APM environment:
edit the &lt;code>run-client.sh&lt;/code> script below and add your initials to the environment i.e. change:&lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=apm-workshop&lt;/code>&lt;br>
to &lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=sjl-apm-workshop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/host/python
&lt;span style="color:#204a87">source&lt;/span> run-client.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>python-requests.py&lt;/code> client will make calls to the flask server with a random short sleep time.&lt;br>
You can stop the requests with ++ctrl+c++&lt;/p>
&lt;h2 id="validate-span-are-being-sent">Validate span are being sent&lt;/h2>
&lt;p>&lt;strong>Open a new terminal window&lt;/strong> in your Linux instance to check OpenTelemetry Collector Statistics to see that spans are being sent.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">lynx localhost:55679/debug/tracez
&lt;/code>&lt;/pre>&lt;/div>&lt;p>will show the metrics and spans being gathered and sent by the Collector.&lt;/p>
&lt;p>Lynx is a text browser that was installed during with the &lt;code>setup-tools&lt;/code>. Enabling a web browser to access your environment will allow for a full web GUI.&lt;/p>
&lt;p>&lt;img src="../../../images/06-zpages.png" alt="zpagaes">&lt;/p>
&lt;h2 id="apm-dashboard">APM Dashboard&lt;/h2>
&lt;p>Traces / services will now be viewable in the APM dashboard. A new service takes about 90 seconds to register for the first time, and then all data will be available in real time.&lt;/p>
&lt;p>The &lt;code>Environment&lt;/code> pulldown will let you see the APM map associated with your individual environment that you set with your initials if this was done earlier.&lt;/p>
&lt;p>Additionally span IDs will print in the terminal where flask-server.py is running. You can use ++ctrl+c++ to stop the requests and server any time.&lt;/p>
&lt;p>The Python server application will be called: &lt;code>py-otel-flask-server&lt;/code> and the client will be called &lt;code>py-otel-client&lt;/code>.&lt;/p>
&lt;p>Navigate to &lt;code>Splunk Overvability -&amp;gt; APM&lt;/code>&lt;/p>
&lt;p>&lt;img src="../../../images/07-apm.png" alt="image">&lt;/p>
&lt;p>Service map of this python demo&lt;/p>
&lt;p>&lt;img src="../../../images/08-python.png" alt="image">&lt;/p>
&lt;p>Click on one of the peaks in the grey graph within &amp;ldquo;Services By Latency (P90)&amp;rdquo; on the right hand side and then click the trace to see spans. Also try out &lt;strong>Tag Spotlight&lt;/strong> to see how application operations are broken down in a granular way. You can also try the &lt;strong>Tags&lt;/strong> menu on top to search for a single trace or group of traces by key:value.&lt;/p>
&lt;p>&lt;img src="../../../images/09-pythontraces.png" alt="image">&lt;br>
&lt;img src="../../../images/10-pythonspans.png" alt="image">&lt;/p>
&lt;p>To learn more about traces and spans &lt;a href="https://docs.splunk.com/Observability/apm/terms-concepts/traces-spans.html#apm-traces-spans" target="_blank">see the Splunk APM documentation&lt;/a>
&lt;/p>
&lt;h2 id="where-is-the-opentelemetry-instrumentation">Where is the OpenTelemetry Instrumentation?&lt;/h2>
&lt;p>The &lt;code>run-server.sh&lt;/code> and &lt;code>run-client.sh&lt;/code> scripts set up the environment variables for OpenTelemetry and invoke the Python auto instrumentation:&lt;/p>
&lt;p>&lt;code>spluk-py-trace&lt;/code> is the auto instrumenting function that runs Python3 with the instrumentation that automatically emits spans from the Python app. No code changes are necessary. Splunk Observability Cloud has a &lt;code>Data Setup&lt;/code> Wizard to guide through instrumentation setup.&lt;/p>
&lt;p>OpenTelemetry repo for Python is &lt;a href="https://github.com/signalfx/splunk-otel-python" target="_blank">here&lt;/a>
.&lt;/p>
&lt;p>!!! important
Leave the Flask server running you&amp;rsquo;ll need need this process for the next client examples in the workshop.&lt;/p></description></item><item><title>Otelw: Java- Deploy HTTP Client</title><link>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/java/</guid><description>
&lt;p>Make sure that you still have the Python Flask server from the Python Lab running. If you accidentally shut it down follow steps from the Python lab to restart the Python Flask server.&lt;/p>
&lt;h2 id="start-in-the-java-example-directory">Start in the Java example directory&lt;/h2>
&lt;p>&lt;strong>Open a new terminal window&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/host/java
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="download-otel-java-instrumentation">Download Otel Java Instrumentation&lt;/h2>
&lt;p>Download Splunk OpenTelemetry Java Auto-instrumentation to &lt;code>/opt&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> install-java-otel.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-the-java-http-requests-client">Run the Java HTTP requests client&lt;/h2>
&lt;p>Run the Java client example which uses OKHTTP requests to the Python Flask Server:&lt;/p>
&lt;p>!!! important
If you are doing this workshop as part of a group, before the next step, add your initials do the APM environment:
edit the &lt;code>run-client.sh&lt;/code> script below and add your initials to the environment i.e. change:&lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=apm-workshop&lt;/code>&lt;br>
to &lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=sjl-apm-workshop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> run-client.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see requests printed to the terminal.&lt;/p>
&lt;h2 id="apm-dashboard">APM Dashboard&lt;/h2>
&lt;p>Traces/services will now be viewable in the APM dashboard. A new service takes about 90 seconds to register for the first time, the Python and n all data will be available in real time.&lt;/p>
&lt;p>Additionally the requests made by Java will print in the terminal where flask-server.py is running. You can use ++ctrl+c++ to stop the requests and server any time.&lt;/p>
&lt;p>You should now see a new Java requests service alongside the Python one.&lt;/p>
&lt;p>&lt;img src="../../../images/11-java.png" alt="Java">&lt;/p>
&lt;p>&lt;img src="../../../images/12-javatraces.png" alt="Java Traces">&lt;/p>
&lt;p>&lt;img src="../../../images/13-javaspans.png" alt="Java Spans">&lt;/p>
&lt;h2 id="where-is-the-opentelemetry-instrumentation">Where is the OpenTelemetry Instrumentation?&lt;/h2>
&lt;p>In the &lt;code>run-client.sh&lt;/code> script the java command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">java &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-Dexec.executable&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;java&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-Dotel.resource.attributes&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>service.name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>java-otel-client,deployment.environment&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>apm-workshop &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-javaagent:/opt/splunk-otel-javaagent.jar &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-jar ./target/java-app-1.0-SNAPSHOT.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>splunk-otel-javaagent.jar&lt;/code> file is the automatic OpenTelemetry instrumentation that will emit spans from the app. No code changes are necessary! The &lt;code>otel.&lt;/code> resources set up the service name Aand environment. Config details can be found &lt;a href="https://docs.splunk.com/Observability/gdi/get-data-in/application/java/configuration/advanced-java-otel-configuration.html" target="_blank">here&lt;/a>
&lt;/p>
&lt;p>Splunk&amp;rsquo;s OpenTelmetry autoinstrumentation for Java is &lt;a href="https://github.com/signalfx/splunk-otel-java" target="_blank">here&lt;/a>
&lt;/p></description></item><item><title>Otelw: Node.js- Deploy HTTP Client</title><link>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.38/otelw/labs/apm_for_single_host/node/</guid><description>
&lt;p>Make sure that you still have the Python Flask server from the Python Lab running. If you accidentally shut it down follow steps from the Python lab to restart the Python Flask server.&lt;/p>
&lt;h2 id="start-in-the-node-example-directory">Start in the Node example directory&lt;/h2>
&lt;p>&lt;strong>Open a new terminal window&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/host/node
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configure-nodejs-environment">Configure Node.js environment&lt;/h2>
&lt;p>During &lt;code>npm init&lt;/code> below you can use all defaults when prompted:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">npm init &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>npm install @splunk/otel --save &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>npm install @opentelemetry/instrumentation-http --save
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="run-js-httpget-requests-client">Run .js HTTP.get requests client&lt;/h2>
&lt;p>Set up environment and run the node app with HTTP.get requests
!!! important
If you are doing this workshop as part of a group, before the next step, add your initials do the APM environment:
edit the &lt;code>run-client.sh&lt;/code> script below and add your initials to the environment i.e. change:&lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=apm-workshop&lt;/code>&lt;br>
to &lt;br>
&lt;code>export OTEL_RESOURCE_ATTRIBUTES=deployment.environment=sjl-apm-workshop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">source&lt;/span> run-client.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You will see requests printed to the window&lt;/p>
&lt;h2 id="apm-dashboard">APM Dashboard&lt;/h2>
&lt;p>Traces / services will now be viewable in the APM dashboard. A new service takes about 90 seconds to register for the firs time, and then all data will be available in real time.&lt;/p>
&lt;p>Additionally span IDs will print in the terminal where flask-server.py is running. You can use ++ctrl+c++ to stop the requests and server any time. You should now see a Node requests service alongside the Python and Java ones.&lt;/p>
&lt;p>&lt;img src="../../../images/14-node.png" alt="Node">&lt;/p>
&lt;p>&lt;img src="../../../images/15-nodetraces.png" alt="Node Traces">&lt;/p>
&lt;p>&lt;img src="../../../images/16-nodespans.png" alt="Node Spans">&lt;/p>
&lt;h2 id="where-is-the-opentelemetry-instrumentation">Where is the OpenTelemetry Instrumentation?&lt;/h2>
&lt;p>You can see in the &lt;code>run-client.sh&lt;/code> how the environment has been set up for OpenTelemtry and where the autoinstrumentation takes place as the node app runs.&lt;/p>
&lt;p>Splunk&amp;rsquo;s Otel autoinstrumentation for node.js is &lt;a href="https://github.com/signalfx/splunk-otel-js" target="_blank">here&lt;/a>
&lt;/p></description></item></channel></rss>
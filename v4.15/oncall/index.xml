<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops â€“ Oncalls</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/</link><description>Recent content in Oncalls on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.15/oncall/index.xml" rel="self" type="application/rss+xml"/><item><title>Oncall:</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.15/oncall/getting_started/</guid><description>
&lt;h1 id="initial-setup">Initial Setup&lt;/h1>
&lt;h2 id="aim">Aim&lt;/h2>
&lt;p>This module is simply to ensure you have access to the Splunk On-Call UI (formerly known as VictorOps), Splunk Infrastructure Monitoring UI (formerly known as SignalFx) and the EC2 Instance which has been allocated to you.&lt;/p>
&lt;p>Once you have access to each platform, keep them open for the duration of the workshop as you will be switching between them and the workshop instructions.&lt;/p>
&lt;h2 id="1-activate-your-splunk-on-call-login">1. Activate your Splunk On-Call Login&lt;/h2>
&lt;p>You should have received an invitation to Activate your Splunk On-Call account via e-mail, if you have not already done so, click the &lt;em>Activate Account&lt;/em> link and follow the prompts.&lt;/p>
&lt;p>If you did not receive an invitation it is probably because you already have a Splunk On-Call login, linked to a different organisation.&lt;/p>
&lt;p>If so login to that Org, then use the organisation dropdown next to your username in the top left to switch to the Observability Workshop Org.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/switch-org.png" alt="Switch Org">{: .center}&lt;/p>
&lt;p>!!! Note
If you do not see the Organisation dropdown menu item next to your name with Observability Workshop EMEA that is OK, it simply means you only have access to a single Org so that menu is not visible to you.&lt;/p>
&lt;pre>&lt;code>If you have forgotten your password go to the [sign-in](https://portal.victorops.com/membership/#/) page and use the forgotten password link to reset your password.
![Reset Pwd](..//images/oncall/reset-password.png){: .center}
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="2-activate-your-splunk-infrastructure-monitoring-login">2. Activate your Splunk Infrastructure Monitoring Login&lt;/h2>
&lt;p>You should have received an invitation to join the Splunk Infrastructure Monitoring - Observability Workshop. If you have not already done so click the &lt;strong>JOIN NOW&lt;/strong>{: .label-button .sfx-ui-button-black} button and follow the prompts to set a password and activate your login.&lt;/p>
&lt;h2 id="3-access-your-ec2-instance">3. Access your EC2 Instance&lt;/h2>
&lt;p>Splunk has provided you with a dedicated EC2 Instance which you can use during this workshop for triggering Incidents the same way the instructor did during the introductory demo. This VM has Splunk Infrastructure Monitoring deployed and has an associated Detector configured. The Detector will pass Alerts to Splunk On-Call which will then create Incidents and page the on-call user.&lt;/p>
&lt;p>The welcome e-mail you received providing you all the details for this Workshop contain the instructions for accessing your allocated EC2 Instance.&lt;/p>
&lt;h3 id="ssh-mac-oslinux">SSH (Mac OS/Linux)&lt;/h3>
&lt;p>Most attendees will be able to connect to the workshop by using SSH from their Mac or Linux device.&lt;/p>
&lt;p>To use SSH, open a terminal on your system and type &lt;code>ssh ubuntu@x.x.x.x&lt;/code> (replacing x.x.x.x with the IP address found in your welcome e-mail).&lt;/p>
&lt;p>&lt;img src="..//images/intro/ssh-1.png" alt="ssh login">&lt;/p>
&lt;p>When prompted &lt;strong>&lt;code>Are you sure you want to continue connecting (yes/no/[fingerprint])?&lt;/code>&lt;/strong> please type &lt;strong>&lt;code>yes&lt;/code>&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="..//images/intro/ssh-2.png" alt="ssh password">&lt;/p>
&lt;p>Enter the password provided in the welcome e-mail.&lt;/p>
&lt;p>Upon successful login you will be presented with the Splunk logo and the Linux prompt.&lt;/p>
&lt;p>&lt;img src="..//images/intro/ssh-3.png" alt="ssh connected">&lt;/p>
&lt;p>At this point you are ready to &lt;a href="../../oncall/getting_started/user_profile">continue with the workshop&lt;/a>
when instructed to do so by the instructor&lt;/p>
&lt;hr>
&lt;h3 id="putty-windows-users-only">Putty (Windows users only)&lt;/h3>
&lt;p>If you do not have ssh preinstalled or if you are on a Windows system, the best option is to install putty, you can find the downloads &lt;a href="https://www.putty.org/" target="_blank">here&lt;/a>
.&lt;/p>
&lt;p>!!! important
If you &lt;strong>cannot&lt;/strong> install Putty, please go to &lt;a href="../getting_started/#web-browser-all">Web Browser (All)&lt;/a>
.&lt;/p>
&lt;p>Open Putty and in the &lt;strong>Host Name (or IP address)&lt;/strong> field enter the IP address provided in the welcome e-mail.&lt;/p>
&lt;p>You can optionally save your settings by providing a name and pressing &lt;strong>Save&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="..//images/intro/putty-settings.png" alt="putty-2">&lt;/p>
&lt;p>To then login to your instance click on the &lt;strong>Open&lt;/strong> button as shown above.&lt;/p>
&lt;p>If this is the first time connecting to your EC2 instance, you will be presented with a security dialog, please click &lt;strong>Yes&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="..//images/intro/putty-security.png" alt="putty-3">&lt;/p>
&lt;p>Once connected, login in as &lt;strong>ubuntu&lt;/strong> using the password provided in the welcome e-mail.&lt;/p>
&lt;p>Once you are connected successfully you should see a screen similar to the one below:&lt;/p>
&lt;p>&lt;img src="..//images/intro/putty-loggedin.png" alt="putty-4">&lt;/p>
&lt;p>At this point you are ready to &lt;a href="../../oncall/getting_started/user_profile">continue with the workshop&lt;/a>
when instructed to do so by the instructor&lt;/p>
&lt;hr>
&lt;h3 id="web-browser-all">Web Browser (All)&lt;/h3>
&lt;p>If you are blocked from using SSH (Port 22) or unable to install Putty you may be able to connect to the workshop instance by using a web browser.&lt;/p>
&lt;p>!!! note
This assumes that access to port 6501 is not restricted by your company&amp;rsquo;s firewall.&lt;/p>
&lt;p>Open your web browser and type &lt;strong>http://X.X.X.X:6501&lt;/strong> (where X.X.X.X is the IP address from the welcome e-mail).&lt;/p>
&lt;p>&lt;img src="..//images/intro/shellinabox-url.png" alt="http-6501">&lt;/p>
&lt;p>Once connected, login in as &lt;strong>ubuntu&lt;/strong> and the password is the one provided in the welcome e-mail.&lt;/p>
&lt;p>&lt;img src="..//images/intro/shellinabox-connect.png" alt="http-connect">&lt;/p>
&lt;p>Once you are connected successfully you should see a screen similar to the one below:&lt;/p>
&lt;p>&lt;img src="..//images/intro/shellinabox-login.png" alt="web login">&lt;/p>
&lt;hr>
&lt;h3 id="copy--paste-in-browser">Copy &amp;amp; Paste in browser&lt;/h3>
&lt;p>Unlike when you are using regular SSH, &lt;em>copy and paste&lt;/em> does require a few extra steps to complete when using a browser session. This is due to cross browser restrictions.&lt;/p>
&lt;p>When the workshop asks you to copy instructions into your terminal, please do the following:&lt;/p>
&lt;p>&lt;em>Copy the instruction as normal, but when ready to paste it in the web terminal, choose &lt;strong>Paste from browser&lt;/strong> as show below:&lt;/em>&lt;/p>
&lt;p>&lt;img src="..//images/intro/shellinabox-paste-browser.png" alt="web paste 1">&lt;/p>
&lt;p>This will open a dialog box asking for the text to be pasted into the web terminal:&lt;/p>
&lt;p>&lt;img src="..//images/intro/shellinabox-example-1.png" alt="web paste 3">&lt;/p>
&lt;p>Paste the text in the text box as show, then press &lt;strong>OK&lt;/strong> to complete the copy and paste process.&lt;/p>
&lt;p>!!! note
Unlike regular SSH connection, the web browser has a 60 second time out, and you will be disconnected, and a &lt;strong>Connect&lt;/strong> button will be shown in the center of the web terminal.&lt;/p>
&lt;pre>&lt;code>Simply click the **Connect** button and you will be reconnected and will be able to continue.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="..//images/intro/shellinabox-reconnect.png" alt="web reconnect">&lt;/p>
&lt;p>At this point you are ready to &lt;a href="../../oncall/getting_started/user_profile">continue with the workshop&lt;/a>
when instructed to do so by the instructor&lt;/p></description></item><item><title>Oncall:</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/incident_lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.15/oncall/incident_lifecycle/</guid><description>
&lt;h1 id="ui-overview">UI Overview&lt;/h1>
&lt;h2 id="aim">Aim&lt;/h2>
&lt;p>The aim of this module is for you to get more familiar with the Timeline Tab and the filtering features.&lt;/p>
&lt;hr>
&lt;h2 id="1-timeline">1. Timeline&lt;/h2>
&lt;p>The aim of Splunk On-Call is to &lt;em>&lt;strong>&amp;ldquo;Make On Call Suck Less&amp;rdquo;&lt;/strong>&lt;/em>, and it does this by getting the critical data, to the right people, at the right time.&lt;/p>
&lt;p>The key to making it work for you is to centralize all your alerting sources, sending them all to the Splunk On-Call platform, then you have a single pane of glass in which to manage all of your alerting.&lt;/p>
&lt;p>Login to the Splunk On-Call UI and select the &lt;strong>Timeline&lt;/strong> tab on the main menu bar, you should have a screen similar to the following image:&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-vo-ui.png" alt="Splunk On-Call UI">&lt;/p>
&lt;h2 id="2-people">2. People&lt;/h2>
&lt;p>On the left we have the &lt;strong>People&lt;/strong> section with the &lt;strong>Teams&lt;/strong> and &lt;strong>Users&lt;/strong> sub tabs.&lt;/p>
&lt;p>On the &lt;strong>Teams&lt;/strong> tab, click on &lt;strong>All Teams&lt;/strong> then expand &lt;em>&lt;strong>[Your Teamname]&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>Users with the Splunk On-Call Logo against their name are currently on call.&lt;/p>
&lt;p>Here you can see who is on call within a particular Team, or across all Teams via &lt;strong>Users â†’ On-Call&lt;/strong>.&lt;/p>
&lt;p>If you click into one of the currently on call users, you can see their status.&lt;/p>
&lt;p>It shows which Rotation they are on call for, when their current Shift ends and their next Shift starts (times are displayed in your timezone), what contact methods they have and which Teams they belong to (dummy users such as Hank do not have Contact Methods configured).&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-user-detail.png" alt="User Detail">{: .center}&lt;/p>
&lt;h2 id="3-timeline">3. Timeline&lt;/h2>
&lt;p>In the centre &lt;strong>Timeline&lt;/strong> section you get a realtime view of what is happening within your environment with the newest messages at the top.&lt;/p>
&lt;p>Here you can quickly post update messages to make your colleagues aware of important developments etc.&lt;/p>
&lt;p>You can filter the view using the buttons on the top toolbar showing only update messages, GitHub integrations, or apply more advanced filters.&lt;/p>
&lt;p>Lets change the Filters settings to streamline your view. Click the &lt;strong>Filters&lt;/strong> button then within the &lt;strong>Routing Keys&lt;/strong> tab change the &lt;strong>Show&lt;/strong> setting from &lt;strong>all routing keys&lt;/strong> to &lt;strong>selected routing keys&lt;/strong>.&lt;/p>
&lt;p>Change the &lt;strong>My Keys&lt;/strong> value to &lt;strong>all&lt;/strong> and the &lt;strong>Other Keys&lt;/strong> value to &lt;strong>selected&lt;/strong> and deselect all keys under the Other Keys section.&lt;/p>
&lt;p>Click anywhere outside of the dialogue box to close it.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-timeline-filters.png" alt="Timeline Filters">&lt;/p>
&lt;p>You will probably now have a much simpler view as you will not currently have Incidents created using your Routing Keys, so you are left with the other types of messages that the Timeline can display.&lt;/p>
&lt;p>Click on &lt;strong>Filters&lt;/strong> again, but this time switch to the &lt;strong>Message Types&lt;/strong> tab.&lt;/p>
&lt;p>Here you control the types of messages that are displayed.&lt;/p>
&lt;p>For example, deselect &lt;strong>On-call Changes&lt;/strong> and &lt;strong>Escalations&lt;/strong>, this will reduce the amount of messages displayed.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-timeline-filters-message-types.png" alt="Timeline Filters Message Types">&lt;/p>
&lt;h2 id="4-incidents">4. Incidents&lt;/h2>
&lt;p>On the right we have the &lt;strong>Incidents&lt;/strong> section.&lt;/p>
&lt;p>Here we get a list of all the incidents within the platform, or we can view a more specific list such as incidents you are specifically assigned to, or for any of the Teams you are a member of.&lt;/p>
&lt;p>Select the &lt;strong>Team Incidents&lt;/strong> tab you should find that the &lt;strong>Triggered&lt;/strong>, &lt;strong>Acknowledged&lt;/strong> &amp;amp; &lt;strong>Resolved&lt;/strong> tabs are currently all empty as you have had no incidents logged.&lt;/p>
&lt;p>Let&amp;rsquo;s change that by generating your first incident!&lt;/p>
&lt;hr>
&lt;p>Continue with the &lt;a href="../incident_lifecycle/create_incidents/">Create Incidents&lt;/a>
module.&lt;/p></description></item><item><title>Oncall:</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/detector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/detector/</guid><description>
&lt;h1 id="create-a-signalfx-detector">Create a SignalFx Detector&lt;/h1>
&lt;h2 id="aim">Aim&lt;/h2>
&lt;p>We need to create a new Detector within SignalFx which will use VictorOps as the target to send alerts to.&lt;/p>
&lt;p>We will use Terraform installed within the VM to create the Detector, but first we need to obtain some values required for Terraform to run.&lt;/p>
&lt;hr>
&lt;h2 id="1-preparation">1. Preparation&lt;/h2>
&lt;p>The presenter will typically share these values with you at the start of the module to save time, but the following instructions explain how to get them for yourself.&lt;/p>
&lt;h3 id="11-create-a-variables-document">1.1 Create a variables document&lt;/h3>
&lt;p>We suggest you create a variables document using your preferred text editor as you will be gathering three different values in the next few steps which you need to use in the last step of this module.&lt;/p>
&lt;p>Add the following lines to your variables document, then as you gather the values you can add them to the appropriate lines:&lt;/p>
&lt;p>=== &amp;ldquo;variables.txt&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>``` text
export ACCESS_TOKEN=
export REALM=
export SFXVOPSID=
```
&lt;/code>&lt;/pre>
&lt;h3 id="12-obtain-signalfx-access-token">1.2 Obtain SignalFx Access Token&lt;/h3>
&lt;p>In the Splunk UI you can find your &lt;strong>Access Token&lt;/strong> by clicking on the &lt;strong>Settings&lt;/strong> icon on the top right of the Splunk UI, select &lt;strong>Organization Settings â†’ Access Tokens&lt;/strong>, expand the &lt;strong>Default&lt;/strong> token, then click on &lt;strong>Show Token&lt;/strong> to expose your token.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-access-token.png" alt="Access Token">&lt;/p>
&lt;p>Click the &lt;strong>Copy&lt;/strong>{: .label-button .sfx-ui-button-blue} button to copy it you your clipboard, then paste it into the &lt;code>ACCESS_TOKEN&lt;/code> line of your variables document.&lt;/p>
&lt;p>=== &amp;ldquo;variables.txt&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
export ACCESS_TOKEN={==xxxx==}
export REALM=
export SFXVOPSID=
```
&lt;/code>&lt;/pre>
&lt;h3 id="13-obtain-signalfx-realm">1.3 Obtain SignalFx Realm&lt;/h3>
&lt;p>Still in the Splunk UI, click on the &lt;strong>Settings&lt;/strong> icon again, but this time select &lt;strong>My Profile&lt;/strong>.&lt;/p>
&lt;p>The Realm can be found in the middle of the page within the Organizations section. In this example it is &lt;strong>us1&lt;/strong>, but yours may be &lt;strong>eu0&lt;/strong> or one of the many other SignalFx Realms.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-realm.png" alt="Realm">&lt;/p>
&lt;p>Copy it to the &lt;code>REALM&lt;/code> line of your variables document.&lt;/p>
&lt;p>=== &amp;ldquo;variables.txt&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
export ACCESS_TOKEN={==xxxx==}
export REALM={==xxxx==}
export SFXVOPSID=
```
&lt;/code>&lt;/pre>
&lt;h3 id="14-obtain-victorops-integration-id">1.4. Obtain VictorOps Integration ID&lt;/h3>
&lt;p>In Splunk UI navigate to &lt;strong>Integrations&lt;/strong> and use the search feature to find the VictorOps Integration.&lt;/p>
&lt;p>Expand the &lt;strong>VictorOps-xxxx&lt;/strong> configuration; if there are more than one you will be informed which one to copy by the presenter.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-sfx-vo-integration-id.png" alt="VictorOps Integration">&lt;/p>
&lt;p>Copy it to the &lt;code>SFXVOPSID&lt;/code> line of your variables document.&lt;/p>
&lt;p>=== &amp;ldquo;variables.txt&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
export ACCESS_TOKEN={==xxxx==}
export REALM={==xxxx==}
export SFXVOPSID={==xxxx==}
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="2-create-environment-variables">2. Create environment variables&lt;/h2>
&lt;h3 id="21-copy-variables-to-vm">2.1 Copy variables to VM&lt;/h3>
&lt;p>With all the required values now safely copied into your variables document you can use them to compile the commands which we will run in your VM in the next step.&lt;/p>
&lt;p>=== &amp;ldquo;Example&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
export SFXVOPSID=EYierbGA4AA
export ACCESS_TOKEN=by78voyt7b.....
export REALM=us1
```
&lt;/code>&lt;/pre>
&lt;p>Switch back to your shell session connected to the VM you created in the &lt;strong>Getting Started/Create a Test Environment&lt;/strong> module, all of the following commands will be executed within this instance:&lt;/p>
&lt;p>Past the three commands from your variables document into the shell session of your VM.&lt;/p>
&lt;h2 id="3-initialize-and-apply-terraform">3. Initialize and apply Terraform&lt;/h2>
&lt;p>Still within your VM, switch to the victorops folder where the Terraform config files are located (you should still be logged in as Ubuntu and should not have elevated to root)&lt;/p>
&lt;p>=== &amp;ldquo;Change Directory&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
cd ~/workshop/victorops
```
&lt;/code>&lt;/pre>
&lt;p>Now we can initialize Terraform:&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
terraform init -upgrade
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
Initializing the backend...
Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider &amp;quot;signalfx&amp;quot; (terraform-providers/signalfx) 4.21.0...
The following providers do not have any version constraints in configuration,
so the latest version was installed.
To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = &amp;quot;...&amp;quot; constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.
* provider.signalfx: version = &amp;quot;~&amp;gt; 4.21&amp;quot;
Terraform has been successfully initialized!
You may now begin working with Terraform. Try running &amp;quot;terraform plan&amp;quot; to see
any changes that are required for your infrastructure. All Terraform commands
should now work.
If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
```
&lt;/code>&lt;/pre>
&lt;p>You can now copy and the paste the following code block to run Terraform using the Variables you created in the VM. Check the plan output for errors before typing &lt;em>&lt;strong>yes&lt;/strong>&lt;/em> to commit the apply.&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
terraform apply \
-var=&amp;quot;access_token=$ACCESS_TOKEN&amp;quot; \
-var=&amp;quot;realm=$REALM&amp;quot; \
-var=&amp;quot;sfx_prefix=${HOSTNAME}&amp;quot; \
-var=&amp;quot;sfx_vo_id=$SFXVOPSID&amp;quot; \
-var=&amp;quot;routing_key=${HOSTNAME}_PRI&amp;quot;
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```
An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
+ create
Terraform will perform the following actions:
# signalfx_detector.cpu_greater_90 will be created
+ resource &amp;quot;signalfx_detector&amp;quot; &amp;quot;cpu_greater_90&amp;quot; {
+ description = &amp;quot;Alerts when CPU usage is greater than 90%&amp;quot;
+ id = (known after apply)
+ max_delay = 0
+ name = &amp;quot;vmpe CPU greater than 90%&amp;quot;
+ program_text = &amp;lt;&amp;lt;~EOT
from signalfx.detectors.against_recent import against_recent
A = data('cpu.utilization', filter=filter('host', 'vmpe*')).publish(label='A')
detect(when(A &amp;gt; threshold(90))).publish('CPU utilization is greater than 90%')
EOT
+ show_data_markers = true
+ time_range = 3600
+ url = (known after apply)
+ rule {
+ detect_label = &amp;quot;CPU utilization is greater than 90%&amp;quot;
+ disabled = false
+ notifications = [
+ &amp;quot;VictorOps,xxx,vmpe_pri&amp;quot;,
]
+ parameterized_body = &amp;lt;&amp;lt;~EOT
{{#if anomalous}}
Rule &amp;quot;{{{ruleName}}}&amp;quot; in detector &amp;quot;{{{detectorName}}}&amp;quot; triggered at {{timestamp}}.
{{else}}
Rule &amp;quot;{{{ruleName}}}&amp;quot; in detector &amp;quot;{{{detectorName}}}&amp;quot; cleared at {{timestamp}}.
{{/if}}
{{#if anomalous}}
Triggering condition: {{{readableRule}}}
{{/if}}
{{#if anomalous}}
Signal value: {{inputs.A.value}}
{{else}}
Current signal value: {{inputs.A.value}}
{{/if}}
{{#notEmpty dimensions}}
Signal details: {{{dimensions}}}
{{/notEmpty}}
{{#if anomalous}}
{{#if runbookUrl}}
Runbook: {{{runbookUrl}}}
{{/if}}
{{#if tip}}
Tip: {{{tip}}}
{{/if}}
{{/if}}
EOT
+ parameterized_subject = &amp;quot;{{ruleSeverity}} Alert: {{{ruleName}}} ({{{detectorName}}})&amp;quot;
+ severity = &amp;quot;Critical&amp;quot;
}
}
Plan: 1 to add, 0 to change, 0 to destroy.
Do you want to perform these actions in workspace &amp;quot;Workshop&amp;quot;?
Terraform will perform the actions described above.
Only 'yes' will be accepted to approve.
Enter a value: yes
signalfx_detector.cpu_greater_90: Creating...
signalfx_detector.cpu_greater_90: Creation complete after 2s [id=EWHU-YAAAAA]
Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="4-summary">4. Summary&lt;/h2>
&lt;p>By running Terraform within the VM you have just created a new Detector within SignalFx which will send alerts to VictorOps if the CPU utilization of your specific VM goes above 90%.&lt;/p>
&lt;p>In the Splunk UI go to &lt;strong>Alerts â†’ Detectors&lt;/strong> to show all the Detectors and find the one matching your &lt;code>INSTANCE&lt;/code> value (the first four letters of the name of your VM).&lt;/p>
&lt;p>Optionally - Click on &lt;strong>CPU Utilization is greater than 90%&lt;/strong> to open the Alert Rule Editor to view its settings.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/detector.png" alt="Detector">&lt;/p>
&lt;p>A filter has been used to specifically monitor your VM using the 1st 4 characters of its name, which were randomly assigned when you created the VM.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/detector-filter.png" alt="Detector Filter">&lt;/p>
&lt;p>A &lt;strong>Recipient&lt;/strong> has been configured using the VictorOps Integration and your &lt;strong>Routing Key&lt;/strong> has been specified. This is how a monitoring system such as SignalFx knows to route Alerts into VictorOps, and ensure they get routed to the correct team.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/detector-recipients.png" alt="Detector Recipients">&lt;/p>
&lt;hr>
&lt;p>You have now configured the Integrations between VictorOps and SignalFx!&lt;/p>
&lt;p>The final part of this module is to test the flow of alerts from SignalFx into VictorOps and see how you can manage the incident with both the VictorOps UI and Mobile App.&lt;/p></description></item><item><title>Oncall:</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/multipass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/multipass/</guid><description>
&lt;h1 id="creating-a-test-vm-using-multipass">Creating a Test VM Using Multipass&lt;/h1>
&lt;h2 id="aim">Aim&lt;/h2>
&lt;p>The aim of this module is to guide you through the process of creating a VM locally using Multipass.&lt;/p>
&lt;p>Once the configuration of VictorOps is complete you will use this VM to trigger an Alert from SignalFx which in turn will create an Incident within VictorOps, resulting in you getting paged.&lt;/p>
&lt;hr>
&lt;h2 id="1-install-multipass">1. Install Multipass&lt;/h2>
&lt;p>If you do not already have Multipass installed you can download the installer from &lt;a href="https://multipass.run/" target="_blank">here&lt;/a>
.&lt;/p>
&lt;p>Users running macOS can install it using &lt;a href="https://brew.sh/" target="_blank">Homebrew&lt;/a>
by running:&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
brew cask install multipass
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="2-create-vm-using-multipass">2. Create VM using Multipass&lt;/h2>
&lt;h3 id="21-cloud-init">2.1 Cloud-init&lt;/h3>
&lt;p>The first step is to pull down the &lt;code>cloud-init&lt;/code> file to launch a pre-configured VM.&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
WSVERSION=2.42
curl -s \
https://raw.githubusercontent.com/signalfx/observability-workshop/v$WSVERSION/workshop/cloud-init/victorops.yaml \
-o victorops.yaml
```
&lt;/code>&lt;/pre>
&lt;h3 id="22-launch-vm">2.2 Launch VM&lt;/h3>
&lt;p>Remaining in the same directory where you downloaded &lt;code>victorops.yaml&lt;/code>, run the following commands to create your VM.&lt;/p>
&lt;p>The first command will generate a random unique 4 character string. This will prevent clashes in the Splunk UI.&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
export INSTANCE=$(cat /dev/urandom | base64 | tr -dc 'a-z' | head -c4)
multipass launch \
--name ${INSTANCE} \
--cloud-init victorops.yaml
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
Launched: zevn
```
&lt;/code>&lt;/pre>
&lt;p>Make a note of your VMs Hostname as you will need it in later steps.&lt;/p>
&lt;h3 id="23-connect-to-vm">2.3 Connect to VM&lt;/h3>
&lt;p>Once the VM has deployed successfully, in a &lt;strong>new&lt;/strong> shell session connect to the VM using the following command.&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
multipass shell ${INSTANCE}
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Input&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
multipass shell zevn
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
Last login: Tue Jun 9 15:10:19 2020 from 192.168.64.1
ubuntu@zevn:~$
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="3-install-signalfx-agent">3. Install SignalFx Agent&lt;/h2>
&lt;p>An easy way to install the SignalFx Agent into your VM is to copy the install commands from the Splunk UI, then run them directly within your VM.&lt;/p>
&lt;h3 id="31-splunk-ui">3.1 Splunk UI&lt;/h3>
&lt;p>Navigate to the &lt;strong>Integrations&lt;/strong> tab within the Splunk UI, where you will find the SignalFx SmartAgent tile on the top row.&lt;/p>
&lt;p>Click on the SmartAgent tile to open it&amp;hellip;&lt;/p>
&lt;p>&lt;img src="..//images/oncall/integrations-tab.png" alt="Integrations">&lt;/p>
&lt;p>&amp;hellip;then select the &lt;strong>Setup&lt;/strong> tab&amp;hellip;&lt;/p>
&lt;p>&lt;img src="..//images/oncall/smartagent-tile.png" alt="SmartAgent">&lt;/p>
&lt;p>&amp;hellip;then scroll down to &amp;lsquo;Step 1&amp;rsquo; where you will find the commands for installing the agent for both Linux and Windows. You need to copy the commands for Linux, so click the top &lt;strong>copy&lt;/strong>{: .label-button .sfx-ui-button-blue} button to place these commands on your clipboard ready for the next step.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/smartagent-install.png" alt="SmartAgent Install">&lt;/p>
&lt;h3 id="32-install-agent">3.2 Install Agent&lt;/h3>
&lt;p>Now paste the linux install commands into your VM Shell, the SignalFx Agent will install and after approx 1 min you should have the following result.&lt;/p>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
The SignalFx Agent has been successfully installed.
Make sure that your system's time is relatively accurate or else datapoints may not be accepted.
The agent's main configuration file is located at /etc/signalfx/agent.yaml.
```
&lt;/code>&lt;/pre>
&lt;hr>
&lt;h2 id="4-check-signalfx-agent">4. Check SignalFx Agent&lt;/h2>
&lt;h3 id="41-agent-status">4.1 Agent Status&lt;/h3>
&lt;p>Once the agent has completed installing run the following command to check the status&lt;/p>
&lt;p>=== &amp;ldquo;Shell Command&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
sudo signalfx-agent status
```
&lt;/code>&lt;/pre>
&lt;p>=== &amp;ldquo;Example Output&amp;rdquo;&lt;/p>
&lt;pre>&lt;code>```text
SignalFx Agent version: 5.3.0
Agent uptime: 2m7s
Observers active: host
Active Monitors: 9
Configured Monitors: 9
Discovered Endpoint Count: 6
Bad Monitor Config: None
Global Dimensions: {host: zevn}
GlobalSpanTags: map[]
Datapoints sent (last minute): 237
Datapoints failed (last minute): 0
Datapoints overwritten (total): 0
Events Sent (last minute): 18
Trace Spans Sent (last minute): 0
Trace Spans overwritten (total): 0
Additional status commands:
signalfx-agent status config - show resolved config in use by agent
signalfx-agent status endpoints - show discovered endpoints
signalfx-agent status monitors - show active monitors
signalfx-agent status all - show everything
```
&lt;/code>&lt;/pre>
&lt;h3 id="42-check-the-splunk-ui">4.2 Check the Splunk UI&lt;/h3>
&lt;p>Navigate to the Splunk UI and click on the &lt;strong>Infrastructure&lt;/strong> tab. The click on &lt;strong>Hosts (Smart Agent / collectd)&lt;/strong> under the &lt;strong>Hosts&lt;/strong> section.&lt;/p>
&lt;p>Find your VM and confirm it is reporting in correctly; allow a few minutes for it to appear.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/sfx-infrastructure.png" alt="Infrastructure">&lt;/p>
&lt;p>If it fails to appear after 3 mins, please let the Splunk Team know so they can help troubleshoot.&lt;/p>
&lt;hr>
&lt;p>Because you are using a Multipass VM instead of a Splunk Provided EC2 Instance, you will also need to complete the optional module &amp;ldquo;Create a Detector&amp;rdquo;. This will ensure you receive incident notifications for this VM.&lt;/p></description></item><item><title>Oncall:</title><link>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/sfx_integrations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.15/oncall/optional/sfx_integrations/</guid><description>
&lt;h1 id="victorops-integrations---lab-summary">VictorOps Integrations - Lab Summary&lt;/h1>
&lt;p>This module covers configuring the Integrations between SignalFx and VictorOps. Whilst the detailed steps below walk you through the process, you will find that the intergrations are already active within the Splunk systems being used for this workhop so Steps 1 &amp;amp; 2 are for info only. &lt;strong>You only need to complete Step 3. Copy ID&lt;/strong>&lt;/p>
&lt;h2 id="1-victorops-service-api-endpoint">1. VictorOps Service API Endpoint&lt;/h2>
&lt;p>!!! warning
The SignalFx Integration only needs to be enabled once per VictorOps instance, so you will probably find it has already been enabled, please &lt;strong>DO NOT&lt;/strong> disable an already active integration when completing this lab.&lt;/p>
&lt;p>&lt;strong>This is for info only as the Integration has already been enabled&lt;/strong>&lt;/p>
&lt;p>In order to integrate SignalFx with VictorOps we need to first obtain the Service API Endpoint for VictorOps. Within the VictorOps UI navigate to &lt;strong>Integrations&lt;/strong> main tab and then use the search feature to find the SignalFx Integration.&lt;/p>
&lt;p>If it is not already enabled, click the Enable Integration button to activate it.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/endpoint.png" alt="Endpoint">&lt;/p>
&lt;p>This would be used when configuring the VictorOps Integration within the Splunk UI if it had not already been enabled.&lt;/p>
&lt;h2 id="2-enable-victorops-integration-within-signalfx">2. Enable VictorOps Integration within SignalFx&lt;/h2>
&lt;p>In the Splunk UI navigate to &lt;strong>Integrations&lt;/strong> and use the search feature to find the VictorOps integration.&lt;/p>
&lt;p>!!! danger &amp;ldquo;Do not create a new integration!&amp;rdquo;
Please do not create additional VictorOps integrations if one already exists, it will not break anything but simply creates extra clean up work after the workshop has completed. The aim of this part of the lab was to show you how you would go about configuring the Integration if it was not already enabled.&lt;/p>
&lt;p>Assuming you are using the AppDev EMEA instance of VictorOps you will find the VictorOps Integration has already been configured so there is &lt;strong>no need&lt;/strong> to create a new one.&lt;/p>
&lt;p>However the process of creating a new Integration is simply to click on &lt;strong>Create New Integration&lt;/strong> like in the image below, or if there are existing integrations and you want to add another one you would click &lt;strong>New Integration&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-sfx-new-vo-integration.png" alt="VictorOps Integration">&lt;/p>
&lt;p>Enter a descriptive &lt;strong>Name&lt;/strong> then paste the &lt;strong>Service_API_Endpoint&lt;/strong> value you copied in the previous step into the &lt;strong>Post URL&lt;/strong> field, then save it.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-sfx-vo-integration-url.png" alt="VictorOps Integration">&lt;/p>
&lt;p>!!! important &amp;ldquo;Handling multiple VictorOps integrations&amp;rdquo;
SignalFx can integrate with multiple VictorOps accounts so it is important when creating one to use a descriptive name and to not simply call it VictorOps. This name will be used within the Splunk UI when selecting this integration, so ensure it is unambiguous&lt;/p>
&lt;h2 id="3-copy-id">3. Copy ID&lt;/h2>
&lt;p>In Splunk UI navigate to &lt;strong>Integrations&lt;/strong> and use the search feature to find the VictorOps Integration.&lt;/p>
&lt;p>Copy the ID field and save it for use in the next steps. We suggest you create a notepad document or similar as you will be gathering some additional values in the next steps.&lt;/p>
&lt;p>&lt;img src="..//images/oncall/m7-sfx-vo-integration-id.png" alt="VictorOps Integration">&lt;/p></description></item></channel></rss>
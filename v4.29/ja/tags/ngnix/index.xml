<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops – NGNIX</title><link>https://signalfx.github.io/observability-workshop/v4.29/ja/tags/ngnix/</link><description>Recent content in NGNIX on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://signalfx.github.io/observability-workshop/v4.29/ja/tags/ngnix/index.xml" rel="self" type="application/rss+xml"/><item><title>Imt: K3s に NGINX をデプロイする</title><link>https://signalfx.github.io/observability-workshop/v4.29/ja/imt/docs/gdi/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://signalfx.github.io/observability-workshop/v4.29/ja/imt/docs/gdi/nginx/</guid><description>
&lt;ul>
&lt;li>NGINX ReplicaSet を K3s クラスタにデプロイし、NGINX デプロイメントのディスカバリーを確認します。&lt;/li>
&lt;li>負荷テストを実行してメトリクスを作成し、Splunk Observability Cloudにストリーミングすることを確認します！&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1-nginx-の起動">1. NGINX の起動&lt;/h2>
&lt;p>Splunk UI で &lt;strong>WORKLOADS&lt;/strong> タブを選択して、実行中の Pod の数を確認します。これにより、クラスタ上のワークロードの概要がわかるはずです。&lt;/p>
&lt;p>&lt;img src="../../../images/k8s-workloads.png" alt="Workload Agent">&lt;/p>
&lt;p>デフォルトの Kubernetes Pod のうち、ノードごとに実行されている単一のエージェントコンテナに注目してください。この1つのコンテナが、このノードにデプロイされているすべての Pod とサービスを監視します！&lt;/p>
&lt;p>次に、&lt;strong>MAP&lt;/strong> タブを選択してデフォルトのクラスタノードビューに戻し、再度クラスタを選択します。&lt;/p>
&lt;p>Multipass または AWS/EC2 のシェルセッションで、&lt;code>nginx&lt;/code> ディレクトリに移動します。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-0" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Change-Directory"
id="tabs-0-0-tab" data-toggle="tab" href="#tabs-0-0" role="tab" onclick="handleClick(&amp;#34;Change-Directory&amp;#34;);"
aria-controls="tabs-0-0" aria-selected="true">
Change Directory
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-0-content">&lt;div class="tab-pane fade show active"
id="tabs-0-0" role="tabpanel" aria-labelled-by="tabs-0-0-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">cd&lt;/span> ~/workshop/k3s/nginx&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="2-nginxのデプロイメント作成">2. NGINXのデプロイメント作成&lt;/h2>
&lt;p>NGINX の &lt;code>configmap&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> を &lt;code>nginx.conf&lt;/code> ファイルを使って作成します。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-1" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Kubectl-Configmap-Create"
id="tabs-1-0-tab" data-toggle="tab" href="#tabs-1-0" role="tab" onclick="handleClick(&amp;#34;Kubectl-Configmap-Create&amp;#34;);"
aria-controls="tabs-1-0" aria-selected="true">
Kubectl Configmap Create
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Kubectl-Create-Configmap-Output"
id="tabs-1-1-tab" data-toggle="tab" href="#tabs-1-1" role="tab" onclick="handleClick(&amp;#34;Kubectl-Create-Configmap-Output&amp;#34;);"
aria-controls="tabs-1-1" aria-selected="false">
Kubectl Create Configmap Output
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-1-content">&lt;div class="tab-pane fade show active"
id="tabs-1-0" role="tabpanel" aria-labelled-by="tabs-1-0-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create configmap nginxconfig --from-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>nginx.conf&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-1-1" role="tabpanel" aria-labelled-by="tabs-1-1-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">configmap/nginxconfig created&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>続いて、デプロイメントを作成します。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Kubectl-Create-Deployment"
id="tabs-2-0-tab" data-toggle="tab" href="#tabs-2-0" role="tab" onclick="handleClick(&amp;#34;Kubectl-Create-Deployment&amp;#34;);"
aria-controls="tabs-2-0" aria-selected="true">
Kubectl Create Deployment
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Kubectl-Create-Deployment-Output"
id="tabs-2-1-tab" data-toggle="tab" href="#tabs-2-1" role="tab" onclick="handleClick(&amp;#34;Kubectl-Create-Deployment-Output&amp;#34;);"
aria-controls="tabs-2-1" aria-selected="false">
Kubectl Create Deployment Output
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-2-content">&lt;div class="tab-pane fade show active"
id="tabs-2-0" role="tabpanel" aria-labelled-by="tabs-2-0-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f nginx-deployment.yaml&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-2-1" role="tabpanel" aria-labelled-by="tabs-2-1-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">deployment.apps/nginx created
service/nginx created&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>次に、NGINXに対する負荷テストを作成するため、 Locust&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> をデプロイします。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-3" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Kubectl-Create-Deployment"
id="tabs-3-0-tab" data-toggle="tab" href="#tabs-3-0" role="tab" onclick="handleClick(&amp;#34;Kubectl-Create-Deployment&amp;#34;);"
aria-controls="tabs-3-0" aria-selected="true">
Kubectl Create Deployment
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Kubectl-Create-Deployment-Output"
id="tabs-3-1-tab" data-toggle="tab" href="#tabs-3-1" role="tab" onclick="handleClick(&amp;#34;Kubectl-Create-Deployment-Output&amp;#34;);"
aria-controls="tabs-3-1" aria-selected="false">
Kubectl Create Deployment Output
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-3-content">&lt;div class="tab-pane fade show active"
id="tabs-3-0" role="tabpanel" aria-labelled-by="tabs-3-0-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl create -f locust-deployment.yaml&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-3-1" role="tabpanel" aria-labelled-by="tabs-3-1-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">deployment.apps/nginx-loadgenerator created
service/nginx-loadgenerator created&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;p>デプロイメントが成功し、Locust と NGINX Pod が動作していることを確認しましょう。&lt;/p>
&lt;p>Splunk UI を開いていれば、新しい Pod が起動し、コンテナがデプロイされているのがわかるはずです。&lt;/p>
&lt;p>Pod が実行状態に移行するまでには 20 秒程度しかかかりません。Splunk UIでは、以下のようなクラスタが表示されます。&lt;/p>
&lt;p>&lt;img src="../../../images/cluster.png" alt="Back to Cluster">&lt;/p>
&lt;p>もう一度 &lt;strong>WORKLOADS&lt;/strong> タブを選択すると、新しい ReplicaSet と NGINX 用のデプロイメントが追加されていることがわかります。&lt;/p>
&lt;p>&lt;img src="../../../images/k8s-workloads-nginx.png" alt="NGINX loaded">&lt;/p>
&lt;hr>
&lt;p>これをシェルでも検証してみましょう。&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Kubectl-Get-Pods"
id="tabs-4-0-tab" data-toggle="tab" href="#tabs-4-0" role="tab" onclick="handleClick(&amp;#34;Kubectl-Get-Pods&amp;#34;);"
aria-controls="tabs-4-0" aria-selected="true">
Kubectl Get Pods
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Kubectl-Get-Pods-Output"
id="tabs-4-1-tab" data-toggle="tab" href="#tabs-4-1" role="tab" onclick="handleClick(&amp;#34;Kubectl-Get-Pods-Output&amp;#34;);"
aria-controls="tabs-4-1" aria-selected="false">
Kubectl Get Pods Output
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="tabs-4-content">&lt;div class="tab-pane fade show active"
id="tabs-4-0" role="tabpanel" aria-labelled-by="tabs-4-0-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get pods&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-4-1" role="tabpanel" aria-labelled-by="tabs-4-1-tab">&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">NAME READY STATUS RESTARTS AGE
splunk-otel-collector-k8s-cluster-receiver-77784c659c-ttmpk 1/1 Running 0 9m19s
splunk-otel-collector-agent-249rd 1/1 Running 0 9m19s
svclb-nginx-vtnzg 1/1 Running 0 5m57s
nginx-7b95fb6b6b-7sb9x 1/1 Running 0 5m57s
nginx-7b95fb6b6b-lnzsq 1/1 Running 0 5m57s
nginx-7b95fb6b6b-hlx27 1/1 Running 0 5m57s
nginx-7b95fb6b6b-zwns9 1/1 Running 0 5m57s
svclb-nginx-loadgenerator-nscx4 1/1 Running 0 2m20s
nginx-loadgenerator-755c8f7ff6-x957q 1/1 Running 0 2m20s&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="3-locust-の負荷テストの実行">3. Locust の負荷テストの実行&lt;/h2>
&lt;p>Locust はオープンソースの負荷テストツールで、EC2 インスタンスの IP アドレスの8080番ポートで Locust が利用できるようになりました。Webブラウザで新しいタブを開き、&lt;code>http://{==EC2-IP==}:8080/&lt;/code>にアクセスすると、Locust が動作しているのが確認できます。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust.png" alt="Locust">&lt;/p>
&lt;p>&lt;strong>Spawn rate&lt;/strong> を 2 に設定し、&lt;strong>Start Swarming&lt;/strong> をクリックします。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust-spawn-rate.png" alt="Locust Spawn Rate">&lt;/p>
&lt;p>これにより、アプリケーションに緩やかな連続した負荷がかかるようになります。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-locust-statistics.png" alt="Locust Statistics">&lt;/p>
&lt;p>サイドメニューから &lt;strong>Dashboards → NGINX → NGINX Servers&lt;/strong> を選択して、UIにメトリクスが表示されていることを確認します。さらに &lt;strong>Overrides&lt;/strong> フィルターを適用して、 &lt;code>k8s.cluster.name:&lt;/code> に、ターミナルの　&lt;code>echo $(hostname)-k3s-cluster&lt;/code> で返されるクラスタの名前を見つけます。&lt;/p>
&lt;p>&lt;img src="../../../images/nginx-dashboard.png" alt="NGINXダッシュボード">&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>ConfigMap とは、キーと値のペアで非機密データを保存するために使用される API オブジェクトです。Pod は、環境変数、コマンドライン引数、またはボリューム内の構成ファイルとして ConfigMap を利用することができます。ConfigMap を使用すると、環境固有の構成をコンテナイメージから切り離すことができるため、アプリケーションの移植が容易になります。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>&lt;a href="https://locust.io/" target="_blank">Locust とは？&lt;/a>
.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>
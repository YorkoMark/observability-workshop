<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Splunk Observability Cloud Workshops â€“ Optional/Advanced</title><link>https://splunk.github.io/observability-workshop/v4.52/otelw/labs/optional/</link><description>Recent content in Optional/Advanced on Splunk Observability Cloud Workshops</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://splunk.github.io/observability-workshop/v4.52/otelw/labs/optional/index.xml" rel="self" type="application/rss+xml"/><item><title>Otelw: OTel Collector and APM for Docker</title><link>https://splunk.github.io/observability-workshop/v4.52/otelw/labs/optional/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://splunk.github.io/observability-workshop/v4.52/otelw/labs/optional/docker/</guid><description>
&lt;h2 id="docker-based-apm-examples">Docker based APM examples&lt;/h2>
&lt;hr>
&lt;h3 id="prep">Prep:&lt;/h3>
&lt;p>Make sure you&amp;rsquo;ve stopped your previous workshop examples and stopped all instances of Otel Collector as to not confuse re-used example names.&lt;/p>
&lt;p>Docker must be installed and current for this lab.&lt;/p>
&lt;p>Repo location: &lt;a href="https://github.com/signalfx/otelworkshop/tree/main/misc/docker" target="_blank">https://github.com/signalfx/otelworkshop/tree/main/misc/docker&lt;/a>
&lt;/p>
&lt;p>Start in k8s directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">cd&lt;/span> ~/otelworkshop/misc/docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create environment variables with your Splunk token and realm- substitute yours for the variables in caps:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">SPLUNK_ACCESS_TOKEN&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>YOURTOKENHERE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">SPLUNK_REALM&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>YOURREALMHERE
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add initals to environment i.e. sjl-apm-workshop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">SPLUNK_WORKSHOP_ENV&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>YOURINITIALS-apm-workshop
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Make sure to re-export these environment variables every time you open a terminal.&lt;/p>
&lt;hr>
&lt;h3 id="example-1-python-microservice-w-local-otel-collector">Example 1: Python Microservice w/ Local Otel Collector&lt;/h3>
&lt;p>A local docker network with an OpenTelemetry Collector container and a container with a Python microservice example with a redis client and server in same container.&lt;/p>
&lt;p>Step 1: Create a local docker network called &lt;code>otel-net&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> setup-docker.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Step 2: Run Otel Collector docker container in the &lt;code>otel-net&lt;/code> docker bridged network:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> run-otelcol.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Step 3: Run the Python Redis client w/ Redis server microservice example container:&lt;/p>
&lt;p>Open a new terminal window. Re-export your env variables from the prep section.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> run-python-autgen.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait a about 60 seconds and check APM Explore map to see the microservices.&lt;/p>
&lt;p>Study the run scripts to understand how OpenTelemetry environment variables are configured, and the source code for the microservice example is &lt;a href="https://github.com/signalfx/otelworkshop/tree/main/k8s/python/tools/autogen" target="_blank">here&lt;/a>
&lt;/p>
&lt;p>&lt;code>ctrl-c&lt;/code> in each terminal will stop things and containers can be removed via standard Docker commands.&lt;/p>
&lt;hr>
&lt;h3 id="example-2-python-microservice-sending-telmetry-directly-to-splunk-observability-cloud">Example 2: Python Microservice Sending Telmetry Directly to Splunk Observability Cloud&lt;/h3>
&lt;p>Run the direct-to-ingest docker container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> run-python-autogen-direct.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait a about 60 seconds and check APM Explore map to see the microservices.&lt;/p>
&lt;hr>
&lt;h3 id="example-3-net-microservice-sending-telemetry-directly-to-splunk-observability-cloud">Example 3: .NET Microservice Sending Telemetry Directly to Splunk Observability Cloud&lt;/h3>
&lt;p>Run the direct-to-ingest docker container:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">source&lt;/span> run-dotnet-autogen-direct.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait a about 60 seconds and check APM Explore map to see the microservices.&lt;/p>
&lt;h3 id="misc">Misc&lt;/h3>
&lt;p>Docker container instructions for OpenTelemetry Collector are &lt;a href="https://github.com/signalfx/splunk-otel-collector/blob/main/docs/getting-started/linux-manual.md" target="_blank">here&lt;/a>
&lt;/p>
&lt;p>View Otel Collector trace stats (requires Lynx ascii browser):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker &lt;span style="color:#204a87">exec&lt;/span> -it otelcol curl localhost:55679/debug/tracez &lt;span style="color:#000;font-weight:bold">|&lt;/span> lynx -stdin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>